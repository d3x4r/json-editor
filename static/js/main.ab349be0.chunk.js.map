{"version":3,"sources":["context/alertContext.ts","context/AlertState.tsx","components/Alert/Alert.tsx","components/Header/index.ts","components/Header/Header.tsx","components/DataForm/DataForm.tsx","components/DataForm/index.tsx","components/ValueTypeChanger/ValueTypeChanger.tsx","components/ValueTypeChanger/index.ts","components/RemoveButton/index.ts","components/RemoveButton/RemoveButton.tsx","components/AddPropMenu/AddPropMenu.tsx","utils/getTypes.ts","utils/typeConverters.ts","components/PreviewRow/PreviewRow.tsx","components/PreviewRow/index.ts","components/JsonEditor/index.ts","components/JsonEditor/JsonEditor.tsx","components/PreviewForm/PreviewForm.tsx","components/PreviewForm/index.ts","components/Result/index.ts","components/Result/Result.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["alertContext","createContext","AlertState","children","initialState","message","type","undefined","visible","useState","setMessage","Provider","value","setVisible","newType","newMessage","state","Panel","Collapse","Alert","useContext","CollapseContainer","defaultActiveKey","bordered","header","key","className","toUpperCase","description","showIcon","closable","afterClose","Header","title","TextArea","Input","DataForm","props","updateEditorData","inputValue","updateInputValue","AlertContext","onFinish","objData","JSON","parse","e","toString","Item","rows","onChange","evt","target","placeholder","htmlType","disabled","length","onClick","Option","Select","ValueTypeChanger","defaultType","setType","defaultValue","style","width","RemoveButton","onRemove","icon","DeleteOutlined","color","AddPropMenu","onAddHandler","menu","event","overlay","trigger","PlusOutlined","isObject","item","Object","Array","getValueType","isArray","converters","string","String","number","Number","boolean","Boolean","array","split","convertValueType","getPathOfProperty","parentPath","property","getArrayOfPathParts","path","propertyName","filter","PreviewRow","name","objValue","calculatedData","calculateResult","updatePreviewForm","parent","objKeyInput","setObjKeyInput","savedPropValue","savePropValue","objValueInput","setObjValueInput","valueType","setValueType","isRenderedRow","setRenderedKey","isInvalid","setInvalid","useEffect","onChangeKey","currentKeyPath","prevInputPath","propertyValue","get","arrayOfCurrentInputParents","arrayOfPrevInputParents","alreadyAddedToResult","R","stateWithNewKey","onChangeValue","convertedValue","arrayOfPropertyPaths","onPropRemove","removeProp","typeChanger","propertyPathParts","classNames","data","onAddProperty","addonAfter","JsonEditor","result","keys","map","getNewObject","objectId","uniqueId","getStateWithAddedProperty","getAddedKeyPath","addedKey","PreviewForm","updateEditorState","dataToRender","havingData","addProperty","nodeType","addedKeyPath","updatedState","Result","minify","setMinify","stringify","Layout","Content","App","updateDataToRender","editorState","dataToView","setDataToView","padding","gutter","span","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab349be0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport type alertTypes = 'error' | 'success' | 'info' | 'warning' | undefined;\n\ninterface AlertContextI {\n  message: string;\n  type: alertTypes;\n  visible: boolean;\n  setVisible: (newType: alertTypes, newMessage: string, state: boolean) => void;\n}\n\nconst alertContext = createContext({} as AlertContextI);\n\nexport default alertContext;\n","import React, { useState } from 'react';\nimport alertContext from './alertContext';\nimport { alertTypes } from './alertContext';\n\ninterface initialStateInterface {\n  message: string;\n  type: alertTypes;\n  visible: boolean;\n}\n\nconst AlertState: React.FC = ({ children }) => {\n  const initialState: initialStateInterface = {\n    message: '',\n    type: undefined,\n    visible: false,\n  };\n\n  const [message, setMessage] = useState(initialState);\n  const setVisible = (newType: alertTypes, newMessage: string, state: boolean) => {\n    setMessage({ message: newMessage, type: newType, visible: state });\n  };\n\n  return (\n    <alertContext.Provider value={{ ...message, setVisible }}>{children}</alertContext.Provider>\n  );\n};\n\nexport default AlertState;\n","import React, { useContext } from 'react';\nimport alertContext from '../../context';\nimport { Alert as AlertModal } from 'antd';\nimport './Alert.css';\n\nimport { Collapse } from 'antd';\n\nconst { Panel } = Collapse;\n\nconst Alert: React.FC = () => {\n  const { message, visible, type, setVisible } = useContext(alertContext);\n\n  if (!visible) {\n    return null;\n  }\n\n  const CollapseContainer = (\n    <Collapse defaultActiveKey={['1']} bordered={false}>\n      <Panel header=\"Show\" key=\"1\">\n        {message}\n      </Panel>\n    </Collapse>\n  );\n  return (\n    <div className=\"alert\">\n      <AlertModal\n        message={type?.toUpperCase()}\n        description={CollapseContainer}\n        type={type}\n        showIcon\n        closable\n        afterClose={() => setVisible('error', 'gg', false)}\n      />\n    </div>\n  );\n};\n\nexport default Alert;\n","import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { PageHeader } from 'antd';\nimport './Header.css';\n\nconst Header: React.FC = () => (\n  <PageHeader className=\"header\" title=\"JSON editor\" />\n);\n\nexport default Header;\n","import React, { useState, useContext } from 'react';\nimport AlertContext from '../../context';\nimport { Form, Input, Button } from 'antd';\nconst { TextArea } = Input;\n\nconst JSONexample =\n  '{\"id\":\"0001\",\"type\":\"donut\",\"name\":\"Cake\",\"image\":{\"url\":\"images/0001.jpg\",\"width\":200,\"height\":200},\"thumbnail\":{\"url\":\"images/thumbnails/0001.jpg\",\"width\":32,\"height\":32}}';\n\ntype DataFormProps = {\n  updateEditorData: (state: {}) => void;\n};\n\nconst DataForm: React.FC<DataFormProps> = (props) => {\n  const { updateEditorData } = props;\n  const [inputValue, updateInputValue] = useState('');\n  const { setVisible } = useContext(AlertContext);\n\n  const onFormSubmit = () => {\n    try {\n      const objData = JSON.parse(inputValue);\n      updateEditorData({});\n      updateEditorData(objData);\n      updateInputValue('');\n    } catch (e) {\n      setVisible('error', `${e.toString()}`, true);\n    }\n  };\n\n  const onChangeHandler = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateInputValue(evt.target.value);\n  };\n\n  return (\n    <section className=\"data-form\">\n      <h2 className=\"data-form__title\">Enter data</h2>\n      <Form onFinish={onFormSubmit}>\n        <Form.Item>\n          <TextArea\n            rows={12}\n            value={inputValue}\n            onChange={onChangeHandler}\n            placeholder=\"enter data in json format\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={inputValue.length === 0}>\n            Render Preview\n          </Button>\n          <Button type=\"default\" onClick={() => updateInputValue(JSONexample)}>\n            Paste Example\n          </Button>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default DataForm;\n","import DataForm from \"./DataForm\";\n\nexport default DataForm;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './ValueTypeChanger.css';\nimport { typesToConvert } from '../../types';\n\nconst { Option } = Select;\n\ninterface ValueTypeChanger {\n  defaultType: typesToConvert;\n  setType: (value: typesToConvert) => void;\n  disabled: boolean;\n}\n\nconst ValueTypeChanger: React.FC<ValueTypeChanger> = ({ defaultType, setType, disabled }) => {\n  return (\n    <Select\n      className=\"value-type-changer\"\n      defaultValue={defaultType}\n      style={{ width: 90 }}\n      onChange={setType}\n      disabled={disabled}\n    >\n      <Option value=\"string\">String</Option>\n      <Option value=\"number\">Number</Option>\n      <Option value=\"array\">Array</Option>\n      <Option value=\"boolean\">Boolean</Option>\n    </Select>\n  );\n};\n\nexport default ValueTypeChanger;\n","import ValueTypeChanger from './ValueTypeChanger';\n\nexport default ValueTypeChanger;\n","import RemoveButton from './RemoveButton';\n\nexport default RemoveButton;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface RemoveButtonProps {\n  onRemove: () => void;\n  disabled: boolean;\n}\n\nconst RemoveButton: React.FC<RemoveButtonProps> = ({ onRemove, disabled }) => {\n  return (\n    <Button\n      onClick={onRemove}\n      icon={<DeleteOutlined style={{ color: 'red' }} />}\n      title=\"remove property\"\n      disabled={disabled}\n    ></Button>\n  );\n};\n\nexport default RemoveButton;\n","import React from 'react';\n\nimport { Menu, Dropdown, Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { ClickParam } from 'antd/lib/menu';\nimport { typesOfNodes } from '../../types';\n\ninterface AddPropMenuProps {\n  onAddHandler: (type: typesOfNodes) => void;\n  disabled: boolean;\n}\n\nconst AddPropMenu: React.FC<AddPropMenuProps> = (props) => {\n  const { onAddHandler, disabled } = props;\n  const onClickHandler = (event: ClickParam) => {\n    onAddHandler(event.key as typesOfNodes);\n  };\n\n  const menu = (\n    <Menu onClick={onClickHandler}>\n      <Menu.Item key=\"node\">node</Menu.Item>\n      <Menu.Item key=\"leaf\">leaf</Menu.Item>\n    </Menu>\n  );\n  return (\n    <Dropdown overlay={menu} trigger={['click']} disabled={disabled}>\n      <Button icon={<PlusOutlined style={{ color: '#5b8c00' }} />}></Button>\n    </Dropdown>\n  );\n};\n\nexport default AddPropMenu;\n","const isArray = (item: any) => {\n  return item instanceof Object && item instanceof Array;\n};\n\nconst isObject = (item: any) => {\n  return item instanceof Object && !(item instanceof Array);\n};\n\nconst getValueType = (item: any) => (isArray(item) ? 'array' : typeof item);\n\nexport { isObject, getValueType };\n","import { typesToConvert } from '../types';\n\nconst converters = {\n  string: (value: any) => String(value),\n  number: (value: any) => Number(value),\n  boolean: (value: any) => Boolean(value),\n  array: (value: any) => String(value).split(','),\n};\n\nconst convertValueType = (value: any, type: typesToConvert): any => {\n  return converters[type](value);\n};\n\nexport default convertValueType;\n","import React, { useState, useEffect } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport * as R from 'ramda';\nimport get from 'lodash.get';\nimport ValueTypeChanger from '../ValueTypeChanger';\nimport './PreviewRow.css';\nimport { Input } from 'antd';\nimport RemoveButton from '../RemoveButton';\nimport AddPropMenu from '../AddPropMenu';\nimport { isObject, getValueType, convertValueType } from '../../utils';\nimport { typesToConvert, typesOfNodes } from '../../types';\n\ninterface PreviewRowProps {\n  name: string;\n  value: any;\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n  onAddHandler: (parent: string) => (nodeType: typesOfNodes) => void;\n}\n\nconst getPathOfProperty = (parentPath: string, property: string) =>\n  parentPath ? `${parentPath}.${property}` : property;\n\nconst getArrayOfPathParts = (path: string, propertyName: string = ''): Array<string> => {\n  return [...path.split('.'), propertyName].filter((key) => key);\n};\n\nconst getStateWithRemovedKey = (path: Array<string>) => (state: {}) => R.dissocPath(path, state);\n\nconst PreviewRow: React.FC<PreviewRowProps> = (props) => {\n  const {\n    name,\n    value: objValue,\n    calculatedData,\n    calculateResult,\n    updatePreviewForm,\n    parent,\n    onAddHandler,\n  } = props;\n\n  const [objKeyInput, setObjKeyInput] = useState(name);\n  const [savedPropValue, savePropValue] = useState(objValue);\n  const [objValueInput, setObjValueInput] = useState(objValue);\n  const [valueType, setValueType] = useState(getValueType(objValueInput));\n  const [isRenderedRow, setRenderedKey] = useState(true);\n  const [isInvalid, setInvalid] = useState(false);\n\n  useEffect(() => {\n    savePropValue(objValue);\n    setObjValueInput(objValue);\n  }, [objValue]);\n\n  const changeObjectPropertyType = (valueType: typesToConvert) => {\n    setValueType(valueType);\n    const propertyPathParts = getArrayOfPathParts(parent, objKeyInput);\n    const convertedValue = convertValueType(objValueInput, valueType);\n\n    calculateResult((state: {}) => R.assocPath(propertyPathParts, convertedValue, state));\n  };\n\n  const onChangeKey = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    setObjKeyInput(value);\n\n    const currentKeyPath = getPathOfProperty(parent, value);\n    const prevInputPath = getPathOfProperty(parent, objKeyInput);\n    const propertyValue = get(calculatedData, prevInputPath);\n    const arrayOfCurrentInputParents = getArrayOfPathParts(currentKeyPath);\n    const arrayOfPrevInputParents = getArrayOfPathParts(prevInputPath);\n\n    const alreadyAddedToResult = get(calculatedData, currentKeyPath);\n\n    if (value.length === 0 || alreadyAddedToResult) {\n      setInvalid(true);\n      calculateResult((state: {}) => R.dissocPath(arrayOfPrevInputParents, state));\n      savePropValue(propertyValue);\n    } else if (!isInvalid) {\n      calculateResult((state: {}) => {\n        const stateWithNewKey = R.assocPath(arrayOfCurrentInputParents, propertyValue, state);\n        return R.dissocPath(arrayOfPrevInputParents, stateWithNewKey);\n      });\n    } else {\n      calculateResult((state: {}) =>\n        R.assocPath(arrayOfCurrentInputParents, savedPropValue, state)\n      );\n      setInvalid(false);\n    }\n  };\n\n  const onChangeValue = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const convertedValue = convertValueType(value, valueType as typesToConvert);\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, objKeyInput);\n\n    calculateResult((state: {}) => R.assocPath(arrayOfPropertyPaths, convertedValue, state));\n    setObjValueInput(value);\n  };\n\n  const onPropRemove = (parent: string, name: string) => () => {\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, name);\n    const removeProp = getStateWithRemovedKey(arrayOfPropertyPaths);\n    /* \n        const updatedState = R.dissocPath(arrayOfPropertyPaths, calculatedData);\n        calculateResult(updatedState);\n        updatePreviewForm(updatedState);\n    */\n    calculateResult(removeProp);\n    setRenderedKey(false);\n  };\n\n  const typeChanger = (\n    <ValueTypeChanger\n      defaultType={valueType as typesToConvert}\n      setType={changeObjectPropertyType}\n      disabled={isInvalid}\n    />\n  );\n  const classNames = isInvalid ? 'previewRow__key--invalid' : 'previewRow__key';\n  const renderKey = () => (\n    <div className=\"previewRow__key-wrapper\">\n      <Input\n        className={classNames}\n        value={objKeyInput}\n        onChange={onChangeKey}\n        style={{ width: 120 }}\n      />\n      {isObject(savedPropValue) && (\n        <AddPropMenu onAddHandler={onAddHandler(`${parent}.${objKeyInput}`)} disabled={isInvalid} />\n      )}\n      <RemoveButton onRemove={onPropRemove(parent, objKeyInput)} disabled={isInvalid} />\n      <span className=\"previewRow__splitter\">:</span>\n    </div>\n  );\n\n  const renderProperty = () => {\n    if (isObject(savedPropValue)) {\n      return (\n        <div className=\"preview-row__editor-wrapper\">\n          <span className=\"preview-form__object-brackets preview-form__object-brackets--open\">\n            {'{'}\n          </span>\n          <JsonEditor\n            data={savedPropValue}\n            calculateResult={calculateResult}\n            calculatedData={calculatedData}\n            updatePreviewForm={updatePreviewForm}\n            parent={getPathOfProperty(parent, objKeyInput)}\n            onAddProperty={onAddHandler}\n          />\n          <span className=\"preview-form__object-brackets preview-form__object-brackets--close\">\n            {'}'}\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <Input\n        value={objValueInput}\n        onChange={onChangeValue}\n        style={{ width: 220 }}\n        addonAfter={typeChanger}\n        disabled={isInvalid}\n      />\n    );\n  };\n  const renderRow = () => (\n    <div className=\"previewRow\">\n      {renderKey()}\n      {renderProperty()}\n    </div>\n  );\n\n  return isRenderedRow ? renderRow() : null;\n};\n\nexport default PreviewRow;\n","import PreviewRow from './PreviewRow';\n\nexport default PreviewRow;","import JsonEditor from './JsonEditor';\n\nexport default JsonEditor;","import React from 'react';\nimport PreviewRow from '../PreviewRow';\nimport { typesOfNodes } from '../../types';\nimport './JsonEditor.css';\n\ninterface JsonEditorProps {\n  data: { [key: string]: any };\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n  onAddProperty: (parent: string) => (nodeType: typesOfNodes) => void;\n}\n\nconst JsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { data, calculateResult, calculatedData, updatePreviewForm, parent, onAddProperty } = props;\n\n  const result = Object.keys(data).map((key) => {\n    return (\n      <PreviewRow\n        name={key}\n        value={data[key]}\n        calculatedData={calculatedData}\n        calculateResult={calculateResult}\n        updatePreviewForm={updatePreviewForm}\n        parent={parent}\n        key={key}\n        onAddHandler={onAddProperty}\n      />\n    );\n  });\n\n  return <div className=\"json-editor\">{result}</div>;\n};\n\nexport default JsonEditor;\n","import React from 'react';\nimport JsonEditor from '../JsonEditor';\nimport './PreviewForm.css';\nimport AddPropMenu from '../AddPropMenu';\nimport uniqueId from 'lodash.uniqueid';\nimport * as R from 'ramda';\nimport { typesOfNodes } from '../../types';\n\ntype PreviewFormProps = {\n  data: {};\n  calculateResult: (state: {}) => void;\n  updateEditorState: (state: {}) => void;\n  dataToRender: {};\n};\n\ninterface newObject {\n  name: string;\n  value: string;\n}\n\nconst getNewObject = (): newObject => {\n  const objectId = uniqueId();\n  const name = `newKey_${objectId}`;\n  const value = `newValue_${objectId}`;\n  return { name, value };\n};\n\nconst getStateWithAddedProperty = (path: string[], value: string | {} = {}) => (state: {}) => {\n  return R.assocPath(path, value, state);\n};\n\nconst getAddedKeyPath = (parent: string, addedKey: string) =>\n  [...parent.split('.'), addedKey].filter((key) => key);\n\nconst PreviewForm: React.FC<PreviewFormProps> = (props) => {\n  const { data, calculateResult, updateEditorState, dataToRender } = props;\n\n  const havingData = Object.keys(data).length;\n\n  const addProperty = (parent: string = '') => (nodeType: typesOfNodes) => {\n    const { name, value } = getNewObject();\n    const addedKeyPath = getAddedKeyPath(parent, name);\n    const getUpdatedState =\n      nodeType === 'leaf'\n        ? getStateWithAddedProperty(addedKeyPath, value)\n        : getStateWithAddedProperty(addedKeyPath);\n    const updatedState = getUpdatedState(dataToRender);\n    updateEditorState(updatedState);\n    calculateResult(updatedState);\n  };\n\n  return (\n    <section className=\"preview-form\">\n      <h2 className=\"preview-form__title\">Preview</h2>\n      <div className=\"preview-form__result\">\n        {havingData ? (\n          <>\n            <span className=\"preview-form__object-brackets preview-form__object-brackets--open-root\">\n              {'{'}\n            </span>\n            <JsonEditor\n              data={data}\n              calculatedData={dataToRender}\n              calculateResult={calculateResult}\n              updatePreviewForm={updateEditorState}\n              onAddProperty={addProperty}\n              parent=\"\"\n            />\n            <div className=\"preview-form__add-button-wrapper\">\n              <AddPropMenu onAddHandler={addProperty()} disabled={false} />\n            </div>\n            <span className=\"preview-form__object-brackets preview-form__object-brackets--close-root\">\n              {'}'}\n            </span>\n          </>\n        ) : (\n          <p className=\"preview-form__message\">No data to render</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewForm;\n","import PreviewForm from './PreviewForm';\n\nexport default PreviewForm;","import Result from './Result';\n\nexport default Result;","import React, { useState } from 'react';\nimport { Switch } from 'antd';\nimport './Result.css';\n\ninterface ResultProps {\n  data: {};\n}\nconst Result: React.FC<ResultProps> = ({ data }) => {\n  const [minify, setMinify] = useState(false);\n\n  const result = JSON.stringify(data, null, 4);\n  return (\n    <section className=\"preview-form\">\n      <div className=\"preview-form__header\">\n        <h2 className=\"preview-form__title\">Result</h2>\n        <div>\n          <span>Minify: </span>\n          <Switch onChange={() => setMinify(!minify)} />\n        </div>\n      </div>\n      {minify ? <p>{result}</p> : <pre>{result}</pre>}\n    </section>\n  );\n};\n\nexport default Result;\n","import React, { useState, useEffect } from 'react';\nimport AlertState from '../../context/AlertState';\nimport Alert from '../Alert';\nimport PageHeader from '../Header';\nimport DataForm from '../DataForm';\nimport PreviewForm from '../PreviewForm';\nimport Result from '../Result';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n  const [dataToRender, updateDataToRender] = useState({});\n\n  const [editorState, updateEditorState] = useState(dataToRender);\n\n  const [dataToView, setDataToView] = useState(dataToRender);\n\n  useEffect(() => {\n    updateEditorState((state: {}) => {\n      return dataToRender;\n    });\n    setDataToView((state: {}) => {\n      return dataToRender;\n    });\n  }, [dataToRender]);\n\n  return (\n    <AlertState>\n      <Layout className=\"layout\">\n        <Alert />\n        <Header>\n          <PageHeader />\n        </Header>\n        <Content style={{ padding: '25px 75px' }}>\n          <Row gutter={[8, 8]}>\n            <Col span={4}>\n              <DataForm updateEditorData={updateDataToRender} />\n            </Col>\n            <Col span={14}>\n              <PreviewForm\n                data={editorState}\n                calculateResult={setDataToView}\n                updateEditorState={updateEditorState}\n                dataToRender={dataToView}\n              />\n            </Col>\n            <Col span={6}>\n              <Result data={dataToView} />\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    </AlertState>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}