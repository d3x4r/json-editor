{"version":3,"sources":["components/Header/index.ts","components/Header/Header.tsx","components/DataForm/DataForm.tsx","components/DataForm/index.tsx","components/ValueTypeChanger/ValueTypeChanger.tsx","components/ValueTypeChanger/index.ts","components/RemoveButton/index.ts","components/RemoveButton/RemoveButton.tsx","utils/getTypes.ts","utils/typeConverters.ts","components/PreviewRow/PreviewRow.tsx","components/PreviewRow/index.ts","components/AddPropertyBtn/index.tsx","components/AddPropertyBtn/AddPropertyBrn.tsx","components/AddTreeBtn/AddTreeBtn.tsx","components/JsonEditor/JsonEditor.tsx","components/JsonEditor/index.ts","components/PreviewForm/index.ts","components/PreviewForm/PreviewForm.tsx","components/Result/index.ts","components/Result/Result.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["Header","className","title","TextArea","Input","DataForm","props","updateEditorData","useState","inputValue","updateInputValue","onFinish","objData","JSON","parse","Item","rows","value","onChange","evt","target","type","htmlType","onClick","Option","Select","ValueTypeChanger","defaultType","setType","defaultValue","style","width","RemoveButton","onRemove","icon","DeleteOutlined","color","getValueType","item","Object","Array","isArray","converters","string","String","number","Number","boolean","Boolean","array","split","convertValueType","getPathOfProperty","parentPath","property","getArrayOfPathParts","path","propertyName","filter","key","PreviewRow","name","objValue","calculatedData","calculateResult","updatePreviewForm","parent","objKeyInput","setObjKeyInput","savedPropValue","savePropValue","objValueInput","setObjValueInput","valueType","setValueType","isRenderedRow","setRenderedKey","onChangeKey","addedPathOfValue","addedValue","oldPathOfValue","currentKeyPath","prevInputPath","propertyValue","get","arrayOfCurrentInputParents","arrayOfPrevInputParents","updateState","state","stateWithNewKey","R","onChangeValue","convertedValue","arrayOfPropertyPaths","onPropRemove","removeProp","typeChanger","propertyPathParts","renderProperty","data","addonAfter","AddPropertyBtn","size","shape","borderColor","AddTreeBtn","getStateWithAddedProperty","JsonEditor","dataToRender","updateDataToRender","getState","calculatedDataWithAddedProperty","updatedDataToRender","onAddHandler","nodeType","objectId","uniqueId","getNewObject","addedKeyPath","addedKey","getAddedKeyPath","getUpdatedState","result","keys","map","PreviewForm","updateEditorState","havingData","length","Result","stringify","Layout","Content","App","editorState","useEffect","padding","gutter","span","ReactDOM","render","document","getElementById"],"mappings":"wTAEeA,G,OCEU,kBACvB,kBAAC,IAAD,CAAYC,UAAU,SAASC,MAAM,kB,2BCH/BC,EAAaC,IAAbD,SCAOE,EDS2B,SAACC,GAAW,IAC5CC,EAAqBD,EAArBC,iBAD2C,EAEZC,mBAAS,IAFG,mBAE5CC,EAF4C,KAEhCC,EAFgC,KAcnD,OACE,6BAAST,UAAU,aACjB,wBAAIA,UAAU,oBAAd,cACA,kBAAC,IAAD,CAAMU,SAbW,WACnB,IAAMC,EAAUC,KAAKC,MAAML,GAC3BF,EAAiBK,GACjBF,EAAiB,MAWb,kBAAC,IAAKK,KAAN,KACE,kBAACZ,EAAD,CAAUa,KAAM,GAAIC,MAAOR,EAAYS,SATvB,SAACC,GACvBT,EAAiBS,EAAIC,OAAOH,WAUxB,kBAAC,IAAKF,KAAN,KACE,kBAAC,IAAD,CAAQM,KAAK,UAAUC,SAAS,UAAhC,kBAGA,kBAAC,IAAD,CAAQD,KAAK,UAAUE,QAAS,kBAAMb,EA/B9C,mLA+BQ,qB,oDE/BFc,G,OAAWC,IAAXD,QCHOE,EDUsC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACnE,OACE,kBAAC,IAAD,CACE3B,UAAU,qBACV4B,aAAcF,EACdG,MAAO,CAAEC,MAAO,IAChBb,SAAUU,GAEV,kBAACJ,EAAD,CAAQP,MAAM,UAAd,UACA,kBAACO,EAAD,CAAQP,MAAM,UAAd,UACA,kBAACO,EAAD,CAAQP,MAAM,SAAd,SACA,kBAACO,EAAD,CAAQP,MAAM,WAAd,a,kBErBSe,ECMmC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnD,OACE,kBAAC,IAAD,CACEV,QAASU,EACTC,KAAM,kBAACC,EAAA,EAAD,CAAgBL,MAAO,CAAEM,MAAO,SACtClC,MAAM,qBCLNmC,EAAe,SAACC,GAAD,OARL,SAACA,GACf,OAAOA,aAAgBC,QAAUD,aAAgBE,MAOdC,CAAQH,GAAQ,eAAiBA,GCNhEI,EAAa,CACjBC,OAAQ,SAAC1B,GAAD,OAAgB2B,OAAO3B,IAC/B4B,OAAQ,SAAC5B,GAAD,OAAgB6B,OAAO7B,IAC/B8B,QAAS,SAAC9B,GAAD,OAAgB+B,QAAQ/B,IACjCgC,MAAO,SAAChC,GAAD,OAAgB2B,OAAO3B,GAAOiC,MAAM,OAO9BC,EAJU,SAAClC,EAAYI,GACpC,OAAOqB,EAAWrB,GAAMJ,ICUpBmC,EAAoB,SAACC,EAAoBC,GAArB,OACxBD,EAAU,UAAMA,EAAN,YAAoBC,GAAaA,GAEvCC,EAAsB,SAACC,GAA4D,IAA9CC,EAA6C,uDAAtB,GAChE,MAAO,sBAAID,EAAKN,MAAM,MAAf,CAAqBO,IAAcC,QAAO,SAACC,GAAD,OAASA,MCtB7CC,EDoC+B,SAACtD,GAAW,IAEtDuD,EAMEvD,EANFuD,KACOC,EAKLxD,EALFW,MACA8C,EAIEzD,EAJFyD,eACAC,EAGE1D,EAHF0D,gBACAC,EAEE3D,EAFF2D,kBACAC,EACE5D,EADF4D,OAPqD,EAUjB1D,mBAASqD,GAVQ,mBAUhDM,EAVgD,KAUnCC,EAVmC,OAWf5D,mBAASsD,GAXM,mBAWhDO,EAXgD,KAWhCC,EAXgC,OAYb9D,mBAASsD,GAZI,mBAYhDS,EAZgD,KAYjCC,EAZiC,OAarBhE,mBAAS6B,EAAakC,IAbD,mBAahDE,EAbgD,KAarCC,EAbqC,OAcflE,oBAAS,GAdM,mBAchDmE,EAdgD,KAcjCC,EAdiC,KAwBjDC,EAAc,SAAC1D,GAA8C,IAlCnE2D,EACAC,EACAC,EAkCc/D,EACRE,EADFC,OAAUH,MAGNgE,EAAiB7B,EAAkBc,EAAQjD,GAC3CiE,EAAgB9B,EAAkBc,EAAQC,GAC1CgB,EAAgBC,IAAIrB,EAAgBmB,GACpCG,EAA6B9B,EAAoB0B,GACjDK,EAA0B/B,EAAoB2B,GAE9CK,GA7CRT,EA8CIO,EA7CJN,EA8CII,EA7CJH,EA8CIM,EA7CD,SAACE,GACJ,IAAMC,EAAkBC,IAAYZ,EAAkBC,EAAYS,GAClE,OAAOE,IAAaV,EAAgBS,KA8ClCzB,EAAgBuB,GAChBtB,EAAkBsB,GAClBjB,EAAca,GACdf,EAAenD,IAGX0E,EAAgB,SAACxE,GAA8C,IAEvDF,EACRE,EADFC,OAAUH,MAGN2E,EAAiBzC,EAAiBlC,EAAOwD,GACzCoB,EAAuBtC,EAAoBW,EAAQC,GAEzDH,GAAgB,SAACwB,GAAD,OAAeE,IAAYG,EAAsBD,EAAgBJ,MACjFhB,EAAiBvD,IAGb6E,EAAe,SAAC5B,EAAgBL,GAAjB,OAAkC,WACrD,IA9D4BL,EA8DtBqC,EAAuBtC,EAAoBW,EAAQL,GACnDkC,GA/DsBvC,EA+DcqC,EA/DU,SAACL,GAAD,OAAeE,IAAalC,EAAMgC,KAiEtFxB,EAAgB+B,GAChB9B,EAAkB8B,GAClBnB,GAAe,KAGXoB,EACJ,kBAAC,EAAD,CACErE,YAAa8C,EACb7C,QAvD6B,SAAC6C,GAChCC,EAAaD,GACb,IAAMwB,EAAoB1C,EAAoBW,EAAQC,GAChDyB,EAAiBzC,EAAiBoB,EAAeE,GAEvDT,GAAgB,SAACwB,GAAD,OAAeE,IAAYO,EAAmBL,EAAgBJ,SAmE1EU,EAAiB,kBACrB,qCF3Hc5D,EE4HF+B,aF3HS9B,UAAYD,aAAgBE,OE4H7C,kBAAC,EAAD,CACE2D,KAAM9B,EACNL,gBAAiBA,EACjBD,eAAgBA,EAChBE,kBAAmBA,EACnBC,OAAQd,EAAkBc,EAAQC,KAGpC,kBAAC,IAAD,CACElD,MAAOsD,EACPrD,SAAUyE,EACV7D,MAAO,CAAEC,MAAO,KAChBqE,WAAYJ,KFzIL,IAAC1D,GEsJhB,OAAOqC,EANL,yBAAK1E,UAAU,cAlCf,oCACE,kBAAC,IAAD,CACEA,UAAU,kBACVgB,MAAOkD,EACPjD,SAAU2D,EACV/C,MAAO,CAAEC,MAAO,OAElB,kBAAC,EAAD,CAAcE,SAAU6D,EAAa5B,EAAQC,KAC7C,0BAAMlE,UAAU,wBAAhB,MA4BCiG,KAIgC,MExJxBG,ECKuC,SAAC/F,GAAW,IACxDiB,EAAYjB,EAAZiB,QACR,OACE,kBAAC,IAAD,CAAQA,QAASA,EAAS+E,KAAK,QAAQC,MAAM,QAAQzE,MAAO,CAAE0E,YAAa,YAA3E,aCMWC,EAT+B,SAACnG,GAAW,IAChDiB,EAAYjB,EAAZiB,QACR,OACE,kBAAC,IAAD,CAAQA,QAASA,EAAS+E,KAAK,QAAQC,MAAM,QAAQzE,MAAO,CAAE0E,YAAa,YAA3E,a,kBCgBEE,EAA4B,SAAClD,GAAD,IAAiBvC,EAAjB,uDAAsC,GAAtC,OAA6C,SAACuE,GAC9E,OAAOE,IAAYlC,EAAMvC,EAAOuE,KCzBnBmB,EDsC+B,SAACrG,GAAW,IAChD6F,EAAqE7F,EAArE6F,KAAMnC,EAA+D1D,EAA/D0D,gBAAiBD,EAA8CzD,EAA9CyD,eAAgBE,EAA8B3D,EAA9B2D,kBAAmBC,EAAW5D,EAAX4D,OADX,EAGZ1D,mBAAS2F,GAHG,mBAGhDS,EAHgD,KAGlCC,EAHkC,KAKjDtB,EAAc,SAACuB,GACnB,IAxBoBtB,EAAWpE,EAwBzB2F,EAAkCD,EAAS/C,GAC3CiD,GAzBcxB,EAyBuBuB,GAzBZ3F,EAyB6C8C,GAxB9DkB,IAAII,EAAOpE,GAAUoE,GA0BnCxB,EAAgB+C,GAChB9C,EAAkB6C,GAClBD,EAAmBG,IAGfC,EAAe,SAACC,GAAD,OAA4B,WAAO,IAAD,EAxBpC,WACnB,IAAMC,EAAWC,MAGjB,MAAO,CAAEvD,KAFC,iBAAasD,GAERlG,MADJ,mBAAekG,IAsBAE,GAAhBxD,EAD6C,EAC7CA,KAAM5C,EADuC,EACvCA,MACRqG,EAnBc,SAACpD,EAAgBqD,GAAjB,MACtB,sBAAIrD,EAAOhB,MAAM,MAAjB,CAAuBqE,IAAU7D,QAAO,SAACC,GAAD,OAASA,KAkB1B6D,CAAgBtD,EAAQL,GACvC4D,EACS,SAAbP,EACIR,EAA0BY,EAAcrG,GACxCyF,EAA0BY,GAEhC/B,EAAYkC,KAGRC,EAASnF,OAAOoF,KAAKf,GAAcgB,KAAI,SAACjE,GAC5C,OACE,kBAAC,EAAD,CACEE,KAAMF,EACN1C,MAAO2F,EAAajD,GACpBI,eAAgBA,EAChBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,OAAQA,EACRP,IAAKA,OAKX,OACE,6BACG+D,EACD,kBAAC,EAAD,CAAgBnG,QAAS0F,EAAa,UACtC,kBAAC,EAAD,CAAY1F,QAAS0F,EAAa,YEjFzBY,G,OCSiC,SAACvH,GAAW,IAClD6F,EAA2D7F,EAA3D6F,KAAMnC,EAAqD1D,EAArD0D,gBAAiB8D,EAAoCxH,EAApCwH,kBAAmBlB,EAAiBtG,EAAjBsG,aAE5CmB,EAAaxF,OAAOoF,KAAKxB,GAAM6B,OAErC,OACE,6BAAS/H,UAAU,gBACjB,wBAAIA,UAAU,uBAAd,WACA,yBAAKA,UAAU,wBACZ8H,EACC,kBAAC,EAAD,CACE5B,KAAMA,EACNpC,eAAgB6C,EAChB5C,gBAAiBA,EACjBC,kBAAmB6D,EACnB5D,OAAO,KAGT,uBAAGjE,UAAU,yBAAb,yBC3BKgI,G,OCIuB,SAAC,GAAD,IAAG9B,EAAH,EAAGA,KAAH,OACpC,6BAASlG,UAAU,gBACjB,wBAAIA,UAAU,uBAAd,UACA,6BAAMY,KAAKqH,UAAU/B,EAAM,KAAM,O,2BCD7BnG,EAAoBmI,IAApBnI,OAAQoI,EAAYD,IAAZC,QCNDC,EDQO,WAAO,IAAD,EACiB7H,mBAAS,IAD1B,mBACnBoG,EADmB,KACLC,EADK,OAGerG,mBAASoG,GAHxB,mBAGnB0B,EAHmB,KAGNR,EAHM,KAU1B,OALAS,qBAAU,WACRT,GAAkB,SAACtC,GACjB,OAAOoB,OAER,CAACA,IAEF,kBAAC,IAAD,CAAQ3G,UAAU,UAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACmI,EAAD,CAAStG,MAAO,CAAE0G,QAAS,cACzB,kBAAC,IAAD,CAAKC,OAAQ,CAAC,EAAG,IACf,kBAAC,IAAD,CAAKC,KAAM,GACT,kBAAC,EAAD,CAAUnI,iBAAkBsG,KAE9B,kBAAC,IAAD,CAAK6B,KAAM,IACT,kBAAC,EAAD,CACEvC,KAAMmC,EACNtE,gBAAiB6C,EACjBiB,kBAAmBA,EACnBlB,aAAcA,KAGlB,kBAAC,IAAD,CAAK8B,KAAM,GACT,kBAAC,EAAD,CAAQvC,KAAMS,S,OElC1B+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f27edbfa.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { PageHeader } from 'antd';\nimport './Header.css';\n\nconst Header: React.FC = () => (\n  <PageHeader className=\"header\" title=\"JSON editor\" />\n);\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Form, Input, Button } from 'antd';\nconst { TextArea } = Input;\n\nconst JSONexample =\n  '{\"id\":\"0001\",\"type\":\"donut\",\"name\":\"Cake\",\"image\":{\"url\":\"images/0001.jpg\",\"width\":200,\"height\":200},\"thumbnail\":{\"url\":\"images/thumbnails/0001.jpg\",\"width\":32,\"height\":32}}';\n\ntype DataFormProps = {\n  updateEditorData: (state: {}) => void;\n};\n\nconst DataForm: React.FC<DataFormProps> = (props) => {\n  const { updateEditorData } = props;\n  const [inputValue, updateInputValue] = useState('');\n\n  const onFormSubmit = () => {\n    const objData = JSON.parse(inputValue);\n    updateEditorData(objData);\n    updateInputValue('');\n  };\n\n  const onChangeHandler = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateInputValue(evt.target.value);\n  };\n\n  return (\n    <section className=\"data-form\">\n      <h2 className=\"data-form__title\">Enter data</h2>\n      <Form onFinish={onFormSubmit}>\n        <Form.Item>\n          <TextArea rows={12} value={inputValue} onChange={onChangeHandler} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Render Preview\n          </Button>\n          <Button type=\"default\" onClick={() => updateInputValue(JSONexample)}>\n            Paste Example\n          </Button>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default DataForm;\n","import DataForm from \"./DataForm\";\n\nexport default DataForm;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './ValueTypeChanger.css';\nimport { typesToConvert } from '../../types';\n\nconst { Option } = Select;\n\ninterface ValueTypeChanger {\n  defaultType: typesToConvert;\n  setType: (value: typesToConvert) => void;\n}\n\nconst ValueTypeChanger: React.FC<ValueTypeChanger> = ({ defaultType, setType }) => {\n  return (\n    <Select\n      className=\"value-type-changer\"\n      defaultValue={defaultType}\n      style={{ width: 90 }}\n      onChange={setType}\n    >\n      <Option value=\"string\">String</Option>\n      <Option value=\"number\">Number</Option>\n      <Option value=\"array\">Array</Option>\n      <Option value=\"boolean\">Boolean</Option>\n    </Select>\n  );\n};\n\nexport default ValueTypeChanger;\n","import ValueTypeChanger from './ValueTypeChanger';\n\nexport default ValueTypeChanger;\n","import RemoveButton from './RemoveButton';\n\nexport default RemoveButton;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface RemoveButtonProps {\n  onRemove: () => void;\n}\n\nconst RemoveButton: React.FC<RemoveButtonProps> = ({ onRemove }) => {\n  return (\n    <Button\n      onClick={onRemove}\n      icon={<DeleteOutlined style={{ color: 'red' }} />}\n      title=\"remove property\"\n    ></Button>\n  );\n};\n\nexport default RemoveButton;\n","const isArray = (item: any) => {\n  return item instanceof Object && item instanceof Array;\n};\n\nconst isObject = (item: any) => {\n  return item instanceof Object && !(item instanceof Array);\n};\n\nconst getValueType = (item: any) => (isArray(item) ? 'array' : typeof item);\n\nexport { isObject, getValueType };\n","import { typesToConvert } from '../types';\n\nconst converters = {\n  string: (value: any) => String(value),\n  number: (value: any) => Number(value),\n  boolean: (value: any) => Boolean(value),\n  array: (value: any) => String(value).split(','),\n};\n\nconst convertValueType = (value: any, type: typesToConvert): any => {\n  return converters[type](value);\n};\n\nexport default convertValueType;\n","import React, { useState } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport * as R from 'ramda';\nimport get from 'lodash.get';\nimport ValueTypeChanger from '../ValueTypeChanger';\nimport './PreviewRow.css';\nimport { Input } from 'antd';\nimport RemoveButton from '../RemoveButton';\nimport { isObject, getValueType, convertValueType } from '../../utils';\nimport { typesToConvert } from '../../types';\n\ninterface PreviewRowProps {\n  name: string;\n  value: any;\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\nconst getPathOfProperty = (parentPath: string, property: string) =>\n  parentPath ? `${parentPath}.${property}` : property;\n\nconst getArrayOfPathParts = (path: string, propertyName: string = ''): Array<string> => {\n  return [...path.split('.'), propertyName].filter((key) => key);\n};\n\nconst getUpdatedState = (\n  addedPathOfValue: Array<string>,\n  addedValue: any,\n  oldPathOfValue: Array<string>\n) => (state: {}) => {\n  const stateWithNewKey = R.assocPath(addedPathOfValue, addedValue, state);\n  return R.dissocPath(oldPathOfValue, stateWithNewKey);\n};\n\nconst getStateWithRemovedKey = (path: Array<string>) => (state: {}) => R.dissocPath(path, state);\n\nconst PreviewRow: React.FC<PreviewRowProps> = (props) => {\n  const {\n    name,\n    value: objValue,\n    calculatedData,\n    calculateResult,\n    updatePreviewForm,\n    parent,\n  } = props;\n\n  const [objKeyInput, setObjKeyInput] = useState(name);\n  const [savedPropValue, savePropValue] = useState(objValue);\n  const [objValueInput, setObjValueInput] = useState(objValue);\n  const [valueType, setValueType] = useState(getValueType(objValueInput));\n  const [isRenderedRow, setRenderedKey] = useState(true);\n\n  const changeObjectPropertyType = (valueType: typesToConvert) => {\n    setValueType(valueType);\n    const propertyPathParts = getArrayOfPathParts(parent, objKeyInput);\n    const convertedValue = convertValueType(objValueInput, valueType);\n\n    calculateResult((state: {}) => R.assocPath(propertyPathParts, convertedValue, state));\n  };\n\n  const onChangeKey = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const currentKeyPath = getPathOfProperty(parent, value);\n    const prevInputPath = getPathOfProperty(parent, objKeyInput);\n    const propertyValue = get(calculatedData, prevInputPath);\n    const arrayOfCurrentInputParents = getArrayOfPathParts(currentKeyPath);\n    const arrayOfPrevInputParents = getArrayOfPathParts(prevInputPath);\n\n    const updateState = getUpdatedState(\n      arrayOfCurrentInputParents,\n      propertyValue,\n      arrayOfPrevInputParents\n    );\n\n    calculateResult(updateState);\n    updatePreviewForm(updateState);\n    savePropValue(propertyValue);\n    setObjKeyInput(value);\n  };\n\n  const onChangeValue = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const convertedValue = convertValueType(value, valueType as typesToConvert);\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, objKeyInput);\n\n    calculateResult((state: {}) => R.assocPath(arrayOfPropertyPaths, convertedValue, state));\n    setObjValueInput(value);\n  };\n\n  const onPropRemove = (parent: string, name: string) => () => {\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, name);\n    const removeProp = getStateWithRemovedKey(arrayOfPropertyPaths);\n\n    calculateResult(removeProp);\n    updatePreviewForm(removeProp);\n    setRenderedKey(false);\n  };\n\n  const typeChanger = (\n    <ValueTypeChanger\n      defaultType={valueType as typesToConvert}\n      setType={changeObjectPropertyType}\n    />\n  );\n\n  const renderKey = () => (\n    <>\n      <Input\n        className=\"previewRow__key\"\n        value={objKeyInput}\n        onChange={onChangeKey}\n        style={{ width: 120 }}\n      />\n      <RemoveButton onRemove={onPropRemove(parent, objKeyInput)} />\n      <span className=\"previewRow__splitter\">:</span>\n    </>\n  );\n\n  const renderProperty = () => (\n    <>\n      {isObject(savedPropValue) ? (\n        <JsonEditor\n          data={savedPropValue}\n          calculateResult={calculateResult}\n          calculatedData={calculatedData}\n          updatePreviewForm={updatePreviewForm}\n          parent={getPathOfProperty(parent, objKeyInput)}\n        />\n      ) : (\n        <Input\n          value={objValueInput}\n          onChange={onChangeValue}\n          style={{ width: 220 }}\n          addonAfter={typeChanger}\n        />\n      )}\n    </>\n  );\n\n  const renderRow = () => (\n    <div className=\"previewRow\">\n      {renderKey()}\n      {renderProperty()}\n    </div>\n  );\n\n  return isRenderedRow ? renderRow() : null;\n};\n\nexport default PreviewRow;\n","import PreviewRow from './PreviewRow';\n\nexport default PreviewRow;","import AddPropertyBtn from './AddPropertyBrn';\n\nexport default AddPropertyBtn;\n","import React from 'react';\nimport { Button } from 'antd';\n\ninterface AddPropertyBtnProps {\n  onClick: () => void;\n}\n\nconst AddPropertyBtn: React.FC<AddPropertyBtnProps> = (props) => {\n  const { onClick } = props;\n  return (\n    <Button onClick={onClick} size=\"small\" shape=\"round\" style={{ borderColor: '#3f6600' }}>\n      Add leaf\n    </Button>\n  );\n};\n\nexport default AddPropertyBtn;\n","import React from 'react';\nimport { Button } from 'antd';\n\ninterface AddTreeBtnProps {\n  onClick: () => void;\n}\n\nconst AddTreeBtn: React.FC<AddTreeBtnProps> = (props) => {\n  const { onClick } = props;\n  return (\n    <Button onClick={onClick} size=\"small\" shape=\"round\" style={{ borderColor: '#3f6600' }}>\n      Add Tree\n    </Button>\n  );\n};\n\nexport default AddTreeBtn;\n","import React, { useState } from 'react';\nimport PreviewRow from '../PreviewRow';\nimport AddPropertyBtn from '../AddPropertyBtn';\nimport AddTreeBtn from '../AddTreeBtn';\nimport * as R from 'ramda';\nimport uniqueId from 'lodash.uniqueid';\nimport get from 'lodash.get';\nimport { typesOfNodes } from '../../types';\n\ninterface JsonEditorProps {\n  data: { [key: string]: any };\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\ninterface newObject {\n  name: string;\n  value: string;\n}\n\nconst getUpdatedData = (state: {}, target: string) => {\n  return target ? get(state, target) : state;\n};\n\nconst getStateWithAddedProperty = (path: string[], value: string | {} = {}) => (state: {}) => {\n  return R.assocPath(path, value, state);\n};\n\nconst getNewObject = (): newObject => {\n  const objectId = uniqueId();\n  const name = `newKey_${objectId}`;\n  const value = `newValue_${objectId}`;\n  return { name, value };\n};\n\nconst getAddedKeyPath = (parent: string, addedKey: string) =>\n  [...parent.split('.'), addedKey].filter((key) => key);\n\nconst JsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { data, calculateResult, calculatedData, updatePreviewForm, parent } = props;\n\n  const [dataToRender, updateDataToRender] = useState(data);\n\n  const updateState = (getState: (state: {}) => {}) => {\n    const calculatedDataWithAddedProperty = getState(calculatedData);\n    const updatedDataToRender = getUpdatedData(calculatedDataWithAddedProperty, parent);\n\n    calculateResult(calculatedDataWithAddedProperty);\n    updatePreviewForm(getState);\n    updateDataToRender(updatedDataToRender);\n  };\n\n  const onAddHandler = (nodeType: typesOfNodes) => () => {\n    const { name, value } = getNewObject();\n    const addedKeyPath = getAddedKeyPath(parent, name);\n    const getUpdatedState =\n      nodeType === 'leaf'\n        ? getStateWithAddedProperty(addedKeyPath, value)\n        : getStateWithAddedProperty(addedKeyPath);\n\n    updateState(getUpdatedState);\n  };\n\n  const result = Object.keys(dataToRender).map((key) => {\n    return (\n      <PreviewRow\n        name={key}\n        value={dataToRender[key]}\n        calculatedData={calculatedData}\n        calculateResult={calculateResult}\n        updatePreviewForm={updatePreviewForm}\n        parent={parent}\n        key={key}\n      />\n    );\n  });\n\n  return (\n    <div>\n      {result}\n      <AddPropertyBtn onClick={onAddHandler('leaf')} />\n      <AddTreeBtn onClick={onAddHandler('node')} />\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import JsonEditor from './JsonEditor';\n\nexport default JsonEditor;","import PreviewForm from './PreviewForm';\n\nexport default PreviewForm;","import React from 'react';\nimport JsonEditor from '../JsonEditor';\nimport './PreviewForm.css';\n\ntype PreviewFormProps = {\n  data: {};\n  calculateResult: (state: {}) => void;\n  updateEditorState: (state: {}) => void;\n  dataToRender: {};\n};\n\nconst PreviewForm: React.FC<PreviewFormProps> = (props) => {\n  const { data, calculateResult, updateEditorState, dataToRender } = props;\n\n  const havingData = Object.keys(data).length;\n\n  return (\n    <section className=\"preview-form\">\n      <h2 className=\"preview-form__title\">Preview</h2>\n      <div className=\"preview-form__result\">\n        {havingData ? (\n          <JsonEditor\n            data={data}\n            calculatedData={dataToRender}\n            calculateResult={calculateResult}\n            updatePreviewForm={updateEditorState}\n            parent=\"\"\n          />\n        ) : (\n          <p className=\"preview-form__message\">No data to render</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewForm;\n","import Result from './Result';\n\nexport default Result;","import React from 'react';\nimport './Result.css';\n\ninterface ResultProps {\n  data: {};\n}\nconst Result: React.FC<ResultProps> = ({ data }) => (\n  <section className=\"preview-form\">\n    <h2 className=\"preview-form__title\">Result</h2>\n    <pre>{JSON.stringify(data, null, 4)}</pre>\n  </section>\n);\n\nexport default Result;\n","import React, { useState, useEffect } from 'react';\nimport PageHeader from '../Header';\nimport DataForm from '../DataForm';\nimport PreviewForm from '../PreviewForm';\nimport Result from '../Result';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n  const [dataToRender, updateDataToRender] = useState({});\n\n  const [editorState, updateEditorState] = useState(dataToRender);\n\n  useEffect(() => {\n    updateEditorState((state: {}) => {\n      return dataToRender;\n    });\n  }, [dataToRender]);\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <PageHeader />\n      </Header>\n      <Content style={{ padding: '25px 75px' }}>\n        <Row gutter={[8, 8]}>\n          <Col span={4}>\n            <DataForm updateEditorData={updateDataToRender} />\n          </Col>\n          <Col span={14}>\n            <PreviewForm\n              data={editorState}\n              calculateResult={updateDataToRender}\n              updateEditorState={updateEditorState}\n              dataToRender={dataToRender}\n            />\n          </Col>\n          <Col span={6}>\n            <Result data={dataToRender} />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}