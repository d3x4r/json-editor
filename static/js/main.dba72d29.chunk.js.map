{"version":3,"sources":["components/Header/index.ts","components/Header/Header.tsx","components/DataForm/DataForm.tsx","components/DataForm/index.tsx","components/ValueTypeChanger/ValueTypeChanger.tsx","components/ValueTypeChanger/index.ts","components/RemoveButton/index.ts","components/RemoveButton/RemoveButton.tsx","components/PreviewRow/PreviewRow.tsx","components/PreviewRow/index.ts","components/AddPropertyBtn/index.tsx","components/AddPropertyBtn/AddPropertyBrn.tsx","components/JsonEditor/index.ts","components/JsonEditor/JsonEditor.tsx","components/PreviewForm/index.ts","components/PreviewForm/PreviewForm.tsx","components/Result/index.ts","components/Result/Result.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["Header","className","title","TextArea","Input","DataForm","props","currentValue","setValue","transformData","onFinish","Item","rows","value","onChange","evt","updatedVaule","target","type","htmlType","Option","Select","ValueTypeChanger","defaultType","setType","defaultValue","style","width","RemoveButton","onRemove","onClick","icon","DeleteOutlined","color","getPathOfProperty","parentPath","property","isObject","item","Object","Array","getValueType","isArray","converters","string","String","number","Number","boolean","Boolean","array","split","convertValueType","PreviewRow","name","objValue","calculatedData","calculateResult","updatePreviewForm","parent","useState","objKeyInput","setObjKeyInput","savedPropValue","savePropValue","objValueInput","setObjValueInput","valueType","setValueType","isRenderedRow","setRenderedKey","onChangeKey","currentInputsPath","oldInputsPath","oldPropValue","get","state","stateWithNewKey","R","stateWithNewAddedKey","onChangeValue","convertedValue","propertyPath","filter","key","onPropRemove","typeChanger","data","addonAfter","AddPropertyBtn","JsonEditor","dataToRender","updateDataToRender","result","keys","map","parentsDeep","length","marginValue","marginBottom","objectId","uniqueId","getNewObject","getUpdatedState","path","getStateWithAddedProperty","addedKey","getAddedKeyPath","calculatedDataWithAddedProperty","updatedDataToRender","PreviewForm","previewFormState","havingData","Result","JSON","stringify","Layout","Content","App","setData","parse","previewData","setPreviewData","padding","gutter","span","stringData","objData","ReactDOM","render","document","getElementById"],"mappings":"wTAEeA,G,OCEU,kBACvB,kBAAC,IAAD,CAAYC,UAAU,SAASC,MAAM,kB,2BCF/BC,EAAaC,IAAbD,SCDOE,EDS2B,SAACC,GAAW,IAC5CC,EAA0CD,EAA1CC,aAAcC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,cAYhC,OACE,6BAASR,UAAU,aACjB,wBAAIA,UAAU,oBAAd,cACA,kBAAC,IAAD,CAAMS,SAbW,WACnBD,EAAcF,GACdC,EAAS,MAYL,kBAAC,IAAKG,KAAN,KACE,kBAACR,EAAD,CAAUS,KAAM,GAAIC,MAAON,EAAcO,SAV9B,SAACC,GAClB,IAAMC,EAAeD,EAAIE,OAAOJ,MAChCL,EAASQ,OAUL,kBAAC,IAAKL,KAAN,KACE,kBAAC,IAAD,CAAQO,KAAK,UAAUC,SAAS,UAAhC,sB,oDE5BFC,G,OAAWC,IAAXD,QCFOE,EDSsC,SAAC,GAG/C,IAFLC,EAEI,EAFJA,YACAC,EACI,EADJA,QAEA,OACE,kBAAC,IAAD,CACEvB,UAAU,qBACVwB,aAAcF,EACdG,MAAO,CAAEC,MAAO,IAChBb,SAAUU,GAEV,kBAACJ,EAAD,CAAQP,MAAM,UAAd,UACA,kBAACO,EAAD,CAAQP,MAAM,UAAd,UACA,kBAACO,EAAD,CAAQP,MAAM,SAAd,SACA,kBAACO,EAAD,CAAQP,MAAM,WAAd,a,kBEvBSe,ECMmC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnD,OACE,kBAAC,IAAD,CACEC,QAASD,EACTE,KAAM,kBAACC,EAAA,EAAD,CAAgBN,MAAO,CAAEO,MAAO,SACtC/B,MAAM,qBCONgC,EAAoB,SAACC,EAAoBC,GAArB,OACxBD,EAAU,UAAMA,EAAN,YAAoBC,GAAaA,GAEvCC,EAAW,SAACC,GAChB,OAAOA,aAAgBC,UAAYD,aAAgBE,QAO/CC,EAAe,SAACH,GAAD,OAJL,SAACA,GACf,OAAOA,aAAgBC,QAAUD,aAAgBE,MAGdE,CAAQJ,GAAQ,eAAiBA,GAEhEK,EAAa,CACjBC,OAAQ,SAAC/B,GAAD,OAAgBgC,OAAOhC,IAC/BiC,OAAQ,SAACjC,GAAD,OAAgBkC,OAAOlC,IAC/BmC,QAAS,SAACnC,GAAD,OAAgBoC,QAAQpC,IACjCqC,MAAO,SAACrC,GAAD,OAAgBgC,OAAOhC,GAAOsC,MAAM,OAGvCC,EAAmB,SAACvC,EAAYK,GACpC,OAAOyB,EAAWzB,GAAML,ICvCXwC,ED0C+B,SAAC/C,GAAW,IAEtDgD,EAMEhD,EANFgD,KACOC,EAKLjD,EALFO,MACA2C,EAIElD,EAJFkD,eACAC,EAGEnD,EAHFmD,gBACAC,EAEEpD,EAFFoD,kBACAC,EACErD,EADFqD,OAPqD,EAUjBC,mBAASN,GAVQ,mBAUhDO,EAVgD,KAUnCC,EAVmC,OAWfF,mBAASL,GAXM,mBAWhDQ,EAXgD,KAWhCC,EAXgC,OAYbJ,mBAASL,GAZI,mBAYhDU,EAZgD,KAYjCC,EAZiC,OAarBN,mBAASnB,EAAawB,IAbD,mBAahDE,EAbgD,KAarCC,EAbqC,OAcfR,oBAAS,GAdM,mBAchDS,EAdgD,KAcjCC,EAdiC,KA2BjDC,EAAc,SAACxD,GAA8C,IAErDF,EACRE,EADFE,OAAUJ,MAGN2D,EAAoBtC,EAAkByB,EAAQ9C,GAC9C4D,EAAgBvC,EAAkByB,EAAQE,GAC1Ca,EAAeC,IAAInB,EAAgBiB,GACzChB,GAAgB,SAACmB,GACf,IAAMC,EAAkBC,IAAYN,EAAkBrB,MAAM,KAAMuB,EAAcE,GAChF,OAAOE,IAAaL,EAActB,MAAM,KAAM0B,MAGhDnB,GAAkB,SAACkB,GACjB,IAAMG,EAAuBD,IAAYN,EAAkBrB,MAAM,KAAMuB,EAAcE,GAGrF,OAF+BE,IAAaL,EAActB,MAAM,KAAM4B,MAKxEf,EAAcU,GACdZ,EAAejD,IAGXmE,EAAgB,SAACjE,GAA8C,IAEvDF,EACRE,EADFE,OAAUJ,MAGNoE,EAAiB5C,EAASxB,GAC5BA,EACAuC,EAAiBvC,EAAOsD,GAEtBe,EAAe,sBAAIvB,EAAOR,MAAM,MAAjB,CAAuBU,IAAasB,QAAO,SAACC,GAAD,OAASA,KAEzE3B,GAAgB,SAACmB,GACf,OAAOE,IAAYI,EAAcD,EAAgBL,MAEnDV,EAAiBrD,IAGbwE,EAAe,SAAC1B,EAAgBL,GAAjB,OAAkC,WACrD,IAAM4B,EAAe,sBAAIvB,EAAOR,MAAM,MAAjB,CAAuBG,IAAM6B,QAAO,SAACC,GAAD,OAASA,KAClE3B,GAAgB,SAACmB,GACf,OAAOE,IAAaI,EAAcN,MAGpClB,GAAkB,SAACkB,GACjB,OAAOE,IAAaI,EAAcN,MAEpCN,GAAe,KAGXgB,EACJ,kBAAC,EAAD,CAAkB/D,YAAa4C,EAAW3C,QAjEX,SAAC2C,GAChCC,EAAaD,GACb,IAAMc,EAAiB5C,EAAS4B,GAC5BA,EACAb,EAAiBa,EAAeE,GAE9Be,EAAe,sBAAIvB,EAAOR,MAAM,MAAjB,CAAuBU,IAAasB,QAAO,SAACC,GAAD,OAASA,KAEzE3B,GAAgB,SAACmB,GAAD,OAAeE,IAAYI,EAAcD,EAAgBL,SAqG3E,OAAOP,EANL,yBAAKpE,UAAU,cAlCf,oCACE,kBAAC,IAAD,CACEA,UAAU,kBACVY,MAAOgD,EACP/C,SAAUyD,EACV7C,MAAO,CAAEC,MAAO,OAElB,kBAAC,EAAD,CAAcE,SAAUwD,EAAa1B,EAAQE,KAC7C,0BAAM5D,UAAU,wBAAhB,MAKF,oCACGoC,EAAS0B,GACR,kBAAC,EAAD,CACEwB,KAAMxB,EACNN,gBAAiBA,EACjBD,eAAgBA,EAChBE,kBAAmBA,EACnBC,OAAQA,EAAM,UAAMA,EAAN,YAAgBE,GAAgBA,IAGhD,kBAAC,IAAD,CACEhD,MAAOoD,EACPnD,SAAUkE,EACVtD,MAAO,CAAEC,MAAO,KAChB6D,WAAYF,MAaiB,MEvKxBG,ECIuC,SAACnF,GAAW,IACxDwB,EAAYxB,EAAZwB,QACR,OAAO,4BAAQA,QAASA,GAAjB,a,kBCNM4D,ECuC+B,SAACpF,GAAW,IAChDiF,EAAqEjF,EAArEiF,KAAM9B,EAA+DnD,EAA/DmD,gBAAiBD,EAA8ClD,EAA9CkD,eAAgBE,EAA8BpD,EAA9BoD,kBAAmBC,EAAWrD,EAAXqD,OADX,EAGZC,mBAAS2B,GAHG,mBAGhDI,EAHgD,KAGlCC,EAHkC,KAiBjDC,EAAStD,OAAOuD,KAAKH,GAAcI,KAAI,SAACX,GAC5C,OACE,kBAAC,EAAD,CACE9B,KAAM8B,EACNvE,MAAO8E,EAAaP,GACpB5B,eAAgBA,EAChBC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,OAAQA,EACRyB,IAAKA,OAKLY,EAAcrC,EAAOR,MAAM,KAAK8C,OAChCC,EAAcvC,EAAOR,MAAM,KAAK8C,OAAS,GAAK,EAAID,EAAc,EACtE,OACE,yBAAKtE,MAAO,CAAEyE,aAAa,GAAD,OAAKD,EAAL,QACvBL,EACD,kBAAC,EAAD,CAAgB/D,QA/BC,WAAO,IA1BN8C,EAAW3D,EA0BN,EAdR,WACnB,IAAMmF,EAAWC,MAGjB,MAAO,CAAE/C,KAFC,iBAAa8C,GAERvF,MADJ,mBAAeuF,IAYAE,GAAhBhD,EADiB,EACjBA,KAAMzC,EADW,EACXA,MAER0F,EAzBwB,SAACC,EAAgB3F,GAAjB,OAAmC,SAAC+D,GACpE,OAAOE,IACL0B,EAAKrB,QAAO,SAACC,GAAD,OAASA,KACrBvE,EACA+D,IAqBwB6B,CAVJ,SAAC9C,EAAgB+C,GAAjB,4BAA0C/C,EAAOR,MAAM,MAAvD,CAA6DuD,IAS5DC,CAAgBhD,EAAQL,GACmBzC,GAC1D+F,EAAkCL,EAAgB/C,GAClDqD,GA/BcjC,EA+BuBgC,GA/BZ3F,EA+B6C0C,GA9B9DgB,IAAIC,EAAO3D,GAAU2D,GAgCnCnB,EAAgBmD,GAChBlD,GAAkB,SAACkB,GAAD,OAAe2B,EAAgB3B,MACjDgB,EAAmBiB,QCrDRC,G,OCOiC,SAACxG,GAAW,IAClDiF,EAA0BjF,EAA1BiF,KAAM9B,EAAoBnD,EAApBmD,gBAD2C,EAEXG,mBAAS2B,GAFE,mBAElDwB,EAFkD,KAEhCrD,EAFgC,KAInDsD,EAAazE,OAAOuD,KAAKiB,GAAkBd,OAEjD,OACE,6BAAShG,UAAU,gBACjB,wBAAIA,UAAU,uBAAd,WACA,yBAAKA,UAAU,wBACZ+G,EACC,kBAAC,EAAD,CACEzB,KAAMwB,EACNvD,eAAgB+B,EAChB9B,gBAAiBA,EACjBC,kBAAmBA,EACnBC,OAAO,KAGT,uBAAG1D,UAAU,yBAAb,yBC1BKgH,G,OCIuB,SAAC,GAAD,IAAG1B,EAAH,EAAGA,KAAH,OACpC,6BAAStF,UAAU,gBACjB,wBAAIA,UAAU,uBAAd,UACA,6BAAMiH,KAAKC,UAAU5B,EAAM,KAAM,O,2BCD7BvF,EAAoBoH,IAApBpH,OAAQqH,EAAYD,IAAZC,QCNDC,EDcO,WAAO,IAAD,EACF1D,mBAHxB,gWAE0B,mBACnB2B,EADmB,KACbgC,EADa,OAEY3D,mBAASsD,KAAKM,MAAMjC,IAFhC,mBAEnBkC,EAFmB,KAENC,EAFM,KAS1B,OACE,kBAAC,IAAD,CAAQzH,UAAU,UAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACoH,EAAD,CAAS3F,MAAO,CAAEiG,QAAS,cACzB,kBAAC,IAAD,CAAKC,OAAQ,CAAC,EAAG,IACf,kBAAC,IAAD,CAAKC,KAAM,GACT,kBAAC,EAAD,CACEtH,aAAcgF,EACd/E,SAAU+G,EACV9G,cAhBU,SAACqH,GACrB,IAAMC,EAAUb,KAAKM,MAAMM,GAC3BJ,EAAeK,OAiBT,kBAAC,IAAD,CAAKF,KAAM,IACT,kBAAC,EAAD,CAAatC,KAAMkC,EAAahE,gBAAiBiE,KAEnD,kBAAC,IAAD,CAAKG,KAAM,GACT,kBAAC,EAAD,CAAQtC,KAAMkC,S,OEtC1BO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dba72d29.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { PageHeader } from 'antd';\nimport './Header.css';\n\nconst Header: React.FC = () => (\n  <PageHeader className=\"header\" title=\"JSON editor\" />\n);\n\nexport default Header;\n","import React from 'react';\nimport { Form, Input, Button } from 'antd';\n\nconst { TextArea } = Input;\n\ntype DataFormProps = {\n  currentValue: string;\n  setValue: (value: string) => void;\n  transformData: (value: string) => void;\n};\n\nconst DataForm: React.FC<DataFormProps> = (props) => {\n  const { currentValue, setValue, transformData } = props;\n\n  const onFormSubmit = () => {\n    transformData(currentValue);\n    setValue('');\n  };\n\n  const onDataEdit = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const updatedVaule = evt.target.value;\n    setValue(updatedVaule);\n  };\n\n  return (\n    <section className=\"data-form\">\n      <h2 className=\"data-form__title\">Enter data</h2>\n      <Form onFinish={onFormSubmit}>\n        <Form.Item>\n          <TextArea rows={12} value={currentValue} onChange={onDataEdit} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Render Preview\n          </Button>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default DataForm;\n","import DataForm from \"./DataForm\";\n\nexport default DataForm;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './ValueTypeChanger.css';\n\nconst { Option } = Select;\n\ninterface ValueTypeChanger {\n  defaultType: string;\n  setType: (value: string) => void;\n}\n\nconst ValueTypeChanger: React.FC<ValueTypeChanger> = ({\n  defaultType,\n  setType\n}) => {\n  return (\n    <Select\n      className=\"value-type-changer\"\n      defaultValue={defaultType}\n      style={{ width: 90 }}\n      onChange={setType}\n    >\n      <Option value=\"string\">String</Option>\n      <Option value=\"number\">Number</Option>\n      <Option value=\"array\">Array</Option>\n      <Option value=\"boolean\">Boolean</Option>\n    </Select>\n  );\n};\n\nexport default ValueTypeChanger;\n","import ValueTypeChanger from './ValueTypeChanger';\n\nexport default ValueTypeChanger;\n","import RemoveButton from './RemoveButton';\n\nexport default RemoveButton;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface RemoveButtonProps {\n  onRemove: () => void;\n}\n\nconst RemoveButton: React.FC<RemoveButtonProps> = ({ onRemove }) => {\n  return (\n    <Button\n      onClick={onRemove}\n      icon={<DeleteOutlined style={{ color: 'red' }} />}\n      title=\"remove property\"\n    ></Button>\n  );\n};\n\nexport default RemoveButton;\n","import React, { useState } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport * as R from 'ramda';\nimport get from 'lodash.get';\nimport ValueTypeChanger from '../ValueTypeChanger';\nimport './PreviewRow.css';\nimport { Input } from 'antd';\nimport RemoveButton from '../RemoveButton';\n\ninterface PreviewRowProps {\n  name: string;\n  value: any;\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\ntype typesToConvert = 'string' | 'number' | 'boolean' | 'array';\n\nconst getPathOfProperty = (parentPath: string, property: string) =>\n  parentPath ? `${parentPath}.${property}` : property;\n\nconst isObject = (item: any) => {\n  return item instanceof Object && !(item instanceof Array);\n};\n\nconst isArray = (item: any) => {\n  return item instanceof Object && item instanceof Array;\n};\n\nconst getValueType = (item: any) => (isArray(item) ? 'array' : typeof item);\n\nconst converters = {\n  string: (value: any) => String(value),\n  number: (value: any) => Number(value),\n  boolean: (value: any) => Boolean(value),\n  array: (value: any) => String(value).split(','),\n};\n\nconst convertValueType = (value: any, type: typesToConvert): any => {\n  return converters[type](value);\n};\n\nconst PreviewRow: React.FC<PreviewRowProps> = (props) => {\n  const {\n    name,\n    value: objValue,\n    calculatedData,\n    calculateResult,\n    updatePreviewForm,\n    parent,\n  } = props;\n\n  const [objKeyInput, setObjKeyInput] = useState(name);\n  const [savedPropValue, savePropValue] = useState(objValue);\n  const [objValueInput, setObjValueInput] = useState(objValue);\n  const [valueType, setValueType] = useState(getValueType(objValueInput));\n  const [isRenderedRow, setRenderedKey] = useState(true);\n\n  const changeObjectPropertyType = (valueType: string) => {\n    setValueType(valueType);\n    const convertedValue = isObject(objValueInput)\n      ? objValueInput\n      : convertValueType(objValueInput, valueType as typesToConvert);\n\n    const propertyPath = [...parent.split('.'), objKeyInput].filter((key) => key);\n\n    calculateResult((state: {}) => R.assocPath(propertyPath, convertedValue, state));\n  };\n\n  const onChangeKey = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const currentInputsPath = getPathOfProperty(parent, value);\n    const oldInputsPath = getPathOfProperty(parent, objKeyInput);\n    const oldPropValue = get(calculatedData, oldInputsPath);\n    calculateResult((state: {}) => {\n      const stateWithNewKey = R.assocPath(currentInputsPath.split('.'), oldPropValue, state);\n      return R.dissocPath(oldInputsPath.split('.'), stateWithNewKey);\n    });\n\n    updatePreviewForm((state: {}) => {\n      const stateWithNewAddedKey = R.assocPath(currentInputsPath.split('.'), oldPropValue, state);\n      const stateWithoutDeletedKey = R.dissocPath(oldInputsPath.split('.'), stateWithNewAddedKey);\n\n      return stateWithoutDeletedKey;\n    });\n\n    savePropValue(oldPropValue);\n    setObjKeyInput(value);\n  };\n\n  const onChangeValue = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const convertedValue = isObject(value)\n      ? value\n      : convertValueType(value, valueType as typesToConvert);\n\n    const propertyPath = [...parent.split('.'), objKeyInput].filter((key) => key);\n\n    calculateResult((state: {}) => {\n      return R.assocPath(propertyPath, convertedValue, state);\n    });\n    setObjValueInput(value);\n  };\n\n  const onPropRemove = (parent: string, name: string) => () => {\n    const propertyPath = [...parent.split('.'), name].filter((key) => key);\n    calculateResult((state: {}) => {\n      return R.dissocPath(propertyPath, state);\n    });\n\n    updatePreviewForm((state: {}) => {\n      return R.dissocPath(propertyPath, state);\n    });\n    setRenderedKey(false);\n  };\n\n  const typeChanger = (\n    <ValueTypeChanger defaultType={valueType} setType={changeObjectPropertyType} />\n  );\n\n  const renderKey = () => (\n    <>\n      <Input\n        className=\"previewRow__key\"\n        value={objKeyInput}\n        onChange={onChangeKey}\n        style={{ width: 120 }}\n      />\n      <RemoveButton onRemove={onPropRemove(parent, objKeyInput)} />\n      <span className=\"previewRow__splitter\">:</span>\n    </>\n  );\n\n  const renderProperty = () => (\n    <>\n      {isObject(savedPropValue) ? (\n        <JsonEditor\n          data={savedPropValue}\n          calculateResult={calculateResult}\n          calculatedData={calculatedData}\n          updatePreviewForm={updatePreviewForm}\n          parent={parent ? `${parent}.${objKeyInput}` : objKeyInput}\n        />\n      ) : (\n        <Input\n          value={objValueInput}\n          onChange={onChangeValue}\n          style={{ width: 220 }}\n          addonAfter={typeChanger}\n        />\n      )}\n    </>\n  );\n\n  const renderRow = () => (\n    <div className=\"previewRow\">\n      {renderKey()}\n      {renderProperty()}\n    </div>\n  );\n\n  return isRenderedRow ? renderRow() : null;\n};\n\nexport default PreviewRow;\n","import PreviewRow from './PreviewRow';\n\nexport default PreviewRow;","import AddPropertyBtn from './AddPropertyBrn';\n\nexport default AddPropertyBtn;\n","import React from 'react';\n\ninterface AddPropertyBtnProps {\n  onClick: () => void;\n}\n\nconst AddPropertyBtn: React.FC<AddPropertyBtnProps> = (props) => {\n  const { onClick } = props;\n  return <button onClick={onClick}>Add prop</button>;\n};\n\nexport default AddPropertyBtn;\n","import JsonEditor from './JsonEditor';\n\nexport default JsonEditor;","import React, { useState } from 'react';\nimport PreviewRow from '../PreviewRow';\nimport AddPropertyBtn from '../AddPropertyBtn';\nimport * as R from 'ramda';\nimport uniqueId from 'lodash.uniqueid';\nimport get from 'lodash.get';\n\ninterface JsonEditorProps {\n  data: { [key: string]: any };\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\ninterface newObject {\n  name: string;\n  value: string;\n}\n\nconst getUpdatedData = (state: {}, target: string) => {\n  return target ? get(state, target) : state;\n};\n\nconst getStateWithAddedProperty = (path: string[], value: string) => (state: {}) => {\n  return R.assocPath(\n    path.filter((key) => key),\n    value,\n    state\n  );\n};\n\nconst getNewObject = (): newObject => {\n  const objectId = uniqueId();\n  const name = `newKey_${objectId}`;\n  const value = `newValue_${objectId}`;\n  return { name, value };\n};\n\nconst getAddedKeyPath = (parent: string, addedKey: string) => [...parent.split('.'), addedKey];\n\nconst JsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { data, calculateResult, calculatedData, updatePreviewForm, parent } = props;\n\n  const [dataToRender, updateDataToRender] = useState(data);\n\n  const onAddHandler = () => {\n    const { name, value } = getNewObject();\n    const addedKeyPath = getAddedKeyPath(parent, name);\n    const getUpdatedState = getStateWithAddedProperty(addedKeyPath, value);\n    const calculatedDataWithAddedProperty = getUpdatedState(calculatedData);\n    const updatedDataToRender = getUpdatedData(calculatedDataWithAddedProperty, parent);\n\n    calculateResult(calculatedDataWithAddedProperty);\n    updatePreviewForm((state: {}) => getUpdatedState(state));\n    updateDataToRender(updatedDataToRender);\n  };\n\n  const result = Object.keys(dataToRender).map((key) => {\n    return (\n      <PreviewRow\n        name={key}\n        value={dataToRender[key]}\n        calculatedData={calculatedData}\n        calculateResult={calculateResult}\n        updatePreviewForm={updatePreviewForm}\n        parent={parent}\n        key={key}\n      />\n    );\n  });\n  // temp reset 5px margin to nested containers\n  const parentsDeep = parent.split('.').length;\n  const marginValue = parent.split('.').length > 1 ? -5 * parentsDeep : 0;\n  return (\n    <div style={{ marginBottom: `${marginValue}px` }}>\n      {result}\n      <AddPropertyBtn onClick={onAddHandler} />\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import PreviewForm from './PreviewForm';\n\nexport default PreviewForm;","import React, { useState } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport './PreviewForm.css';\n\ntype PreviewFormProps = {\n  data: {};\n  calculateResult: (state: {}) => void;\n};\n\nconst PreviewForm: React.FC<PreviewFormProps> = (props) => {\n  const { data, calculateResult } = props;\n  const [previewFormState, updatePreviewForm] = useState(data);\n\n  const havingData = Object.keys(previewFormState).length;\n\n  return (\n    <section className=\"preview-form\">\n      <h2 className=\"preview-form__title\">Preview</h2>\n      <div className=\"preview-form__result\">\n        {havingData ? (\n          <JsonEditor\n            data={previewFormState}\n            calculatedData={data}\n            calculateResult={calculateResult}\n            updatePreviewForm={updatePreviewForm}\n            parent=\"\"\n          />\n        ) : (\n          <p className=\"preview-form__message\">No data to render</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewForm;\n","import Result from './Result';\n\nexport default Result;","import React from 'react';\nimport './Result.css';\n\ninterface ResultProps {\n  data: {};\n}\nconst Result: React.FC<ResultProps> = ({ data }) => (\n  <section className=\"preview-form\">\n    <h2 className=\"preview-form__title\">Result</h2>\n    <pre>{JSON.stringify(data, null, 4)}</pre>\n  </section>\n);\n\nexport default Result;\n","import React, { useState } from 'react';\nimport PageHeader from '../Header';\nimport DataForm from '../DataForm';\nimport PreviewForm from '../PreviewForm';\nimport Result from '../Result';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\n\nconst { Header, Content } = Layout;\n\n// const exampleJSON =\n//   '{ \"name\": \"John\", \"age\": 35, \"isAdmin\": false, \"friends\": [0,1,2,3], \"data\": { \"name\": \"John1\", \"age\": 25, \"isAdmin\": true, \"friends\": [0,1,2,3], \"nestedData1\": { \"name\": \"John2\", \"age\": 15, \"isAdmin\": true, \"friends\": [0,1,2,3] } }, \"testKey1\": \"testValue1\", \"testKey2\": \"testValue2\", \"testKey3\": [1,2,3] }';\n\nconst exampleJSON =\n  '{\"name\":\"John\",\"age\":35,\"isAdmin\":false,\"friends\":[0,1,2,3],\"data\":{\"name\":\"John1\",\"age\":25,\"isAdmin\":true,\"friends\":[0,1,2,3],\"nestedData1\":{\"name\":\"John2\",\"age\":15,\"isAdmin\":true,\"friends\":[0,1,2,3],\"nestedData2\":{\"name\":\"John3\",\"age\":25,\"isAdmin\":false,\"friends\":[0,1,2,3,5]}}},\"testKey1\":\"testValue1\",\"testKey2\":\"testValue2\",\"testKey3\":[1,2,3]}';\n\nconst App: React.FC = () => {\n  const [data, setData] = useState(exampleJSON);\n  const [previewData, setPreviewData] = useState(JSON.parse(data));\n\n  const transformData = (stringData: string) => {\n    const objData = JSON.parse(stringData);\n    setPreviewData(objData);\n  };\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <PageHeader />\n      </Header>\n      <Content style={{ padding: '25px 75px' }}>\n        <Row gutter={[8, 8]}>\n          <Col span={5}>\n            <DataForm\n              currentValue={data}\n              setValue={setData}\n              transformData={transformData}\n            />\n          </Col>\n          <Col span={14}>\n            <PreviewForm data={previewData} calculateResult={setPreviewData} />\n          </Col>\n          <Col span={5}>\n            <Result data={previewData} />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}