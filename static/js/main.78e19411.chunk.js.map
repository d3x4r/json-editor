{"version":3,"sources":["components/Header/index.ts","components/Header/Header.tsx","components/DataForm/DataForm.tsx","components/DataForm/index.tsx","components/ValueTypeChanger/ValueTypeChanger.tsx","components/ValueTypeChanger/index.ts","components/RemoveButton/index.ts","components/RemoveButton/RemoveButton.tsx","components/AddPropMenu/AddPropMenu.tsx","utils/getTypes.ts","utils/typeConverters.ts","components/PreviewRow/PreviewRow.tsx","components/PreviewRow/index.ts","components/JsonEditor/index.ts","components/JsonEditor/JsonEditor.tsx","components/PreviewForm/PreviewForm.tsx","components/PreviewForm/index.ts","components/Result/index.ts","components/Result/Result.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["Header","className","title","TextArea","Input","DataForm","props","updateEditorData","useState","inputValue","updateInputValue","onFinish","objData","JSON","parse","Item","rows","value","onChange","evt","target","type","htmlType","onClick","Option","Select","ValueTypeChanger","defaultType","setType","disabled","defaultValue","style","width","RemoveButton","onRemove","icon","DeleteOutlined","color","AddPropMenu","onAddHandler","menu","event","key","overlay","trigger","PlusOutlined","isObject","item","Object","Array","getValueType","isArray","converters","string","String","number","Number","boolean","Boolean","array","split","convertValueType","getPathOfProperty","parentPath","property","getArrayOfPathParts","path","propertyName","filter","PreviewRow","name","objValue","calculatedData","calculateResult","updatePreviewForm","parent","objKeyInput","setObjKeyInput","savedPropValue","savePropValue","objValueInput","setObjValueInput","valueType","setValueType","isRenderedRow","setRenderedKey","isInvalid","setInvalid","useEffect","onChangeKey","currentKeyPath","prevInputPath","propertyValue","get","arrayOfCurrentInputParents","arrayOfPrevInputParents","alreadyAddedToResult","length","state","R","stateWithNewKey","onChangeValue","convertedValue","arrayOfPropertyPaths","onPropRemove","removeProp","typeChanger","propertyPathParts","classNames","data","onAddProperty","addonAfter","JsonEditor","result","keys","map","getNewObject","objectId","uniqueId","getStateWithAddedProperty","getAddedKeyPath","addedKey","PreviewForm","updateEditorState","dataToRender","havingData","addProperty","nodeType","addedKeyPath","updatedState","Result","stringify","Layout","Content","App","updateDataToRender","editorState","dataToView","setDataToView","padding","gutter","span","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78e19411.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { PageHeader } from 'antd';\nimport './Header.css';\n\nconst Header: React.FC = () => (\n  <PageHeader className=\"header\" title=\"JSON editor\" />\n);\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Form, Input, Button } from 'antd';\nconst { TextArea } = Input;\n\nconst JSONexample =\n  '{\"id\":\"0001\",\"type\":\"donut\",\"name\":\"Cake\",\"image\":{\"url\":\"images/0001.jpg\",\"width\":200,\"height\":200},\"thumbnail\":{\"url\":\"images/thumbnails/0001.jpg\",\"width\":32,\"height\":32}}';\n\ntype DataFormProps = {\n  updateEditorData: (state: {}) => void;\n};\n\nconst DataForm: React.FC<DataFormProps> = (props) => {\n  const { updateEditorData } = props;\n  const [inputValue, updateInputValue] = useState('');\n\n  const onFormSubmit = () => {\n    const objData = JSON.parse(inputValue);\n    updateEditorData({});\n    updateEditorData(objData);\n    updateInputValue('');\n  };\n\n  const onChangeHandler = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateInputValue(evt.target.value);\n  };\n\n  return (\n    <section className=\"data-form\">\n      <h2 className=\"data-form__title\">Enter data</h2>\n      <Form onFinish={onFormSubmit}>\n        <Form.Item>\n          <TextArea rows={12} value={inputValue} onChange={onChangeHandler} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Render Preview\n          </Button>\n          <Button type=\"default\" onClick={() => updateInputValue(JSONexample)}>\n            Paste Example\n          </Button>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default DataForm;\n","import DataForm from \"./DataForm\";\n\nexport default DataForm;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './ValueTypeChanger.css';\nimport { typesToConvert } from '../../types';\n\nconst { Option } = Select;\n\ninterface ValueTypeChanger {\n  defaultType: typesToConvert;\n  setType: (value: typesToConvert) => void;\n  disabled: boolean;\n}\n\nconst ValueTypeChanger: React.FC<ValueTypeChanger> = ({ defaultType, setType, disabled }) => {\n  return (\n    <Select\n      className=\"value-type-changer\"\n      defaultValue={defaultType}\n      style={{ width: 90 }}\n      onChange={setType}\n      disabled={disabled}\n    >\n      <Option value=\"string\">String</Option>\n      <Option value=\"number\">Number</Option>\n      <Option value=\"array\">Array</Option>\n      <Option value=\"boolean\">Boolean</Option>\n    </Select>\n  );\n};\n\nexport default ValueTypeChanger;\n","import ValueTypeChanger from './ValueTypeChanger';\n\nexport default ValueTypeChanger;\n","import RemoveButton from './RemoveButton';\n\nexport default RemoveButton;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface RemoveButtonProps {\n  onRemove: () => void;\n  disabled: boolean;\n}\n\nconst RemoveButton: React.FC<RemoveButtonProps> = ({ onRemove, disabled }) => {\n  return (\n    <Button\n      onClick={onRemove}\n      icon={<DeleteOutlined style={{ color: 'red' }} />}\n      title=\"remove property\"\n      disabled={disabled}\n    ></Button>\n  );\n};\n\nexport default RemoveButton;\n","import React from 'react';\n\nimport { Menu, Dropdown, Button } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { ClickParam } from 'antd/lib/menu';\nimport { typesOfNodes } from '../../types';\n\ninterface AddPropMenuProps {\n  onAddHandler: (type: typesOfNodes) => void;\n  disabled: boolean;\n}\n\nconst AddPropMenu: React.FC<AddPropMenuProps> = (props) => {\n  const { onAddHandler, disabled } = props;\n  const onClickHandler = (event: ClickParam) => {\n    onAddHandler(event.key as typesOfNodes);\n  };\n\n  const menu = (\n    <Menu onClick={onClickHandler}>\n      <Menu.Item key=\"node\">node</Menu.Item>\n      <Menu.Item key=\"leaf\">leaf</Menu.Item>\n    </Menu>\n  );\n  return (\n    <Dropdown overlay={menu} trigger={['click']} disabled={disabled}>\n      <Button icon={<PlusOutlined style={{ color: '#5b8c00' }} />}></Button>\n    </Dropdown>\n  );\n};\n\nexport default AddPropMenu;\n","const isArray = (item: any) => {\n  return item instanceof Object && item instanceof Array;\n};\n\nconst isObject = (item: any) => {\n  return item instanceof Object && !(item instanceof Array);\n};\n\nconst getValueType = (item: any) => (isArray(item) ? 'array' : typeof item);\n\nexport { isObject, getValueType };\n","import { typesToConvert } from '../types';\n\nconst converters = {\n  string: (value: any) => String(value),\n  number: (value: any) => Number(value),\n  boolean: (value: any) => Boolean(value),\n  array: (value: any) => String(value).split(','),\n};\n\nconst convertValueType = (value: any, type: typesToConvert): any => {\n  return converters[type](value);\n};\n\nexport default convertValueType;\n","import React, { useState, useEffect } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport * as R from 'ramda';\nimport get from 'lodash.get';\nimport ValueTypeChanger from '../ValueTypeChanger';\nimport './PreviewRow.css';\nimport { Input } from 'antd';\nimport RemoveButton from '../RemoveButton';\nimport AddPropMenu from '../AddPropMenu';\nimport { isObject, getValueType, convertValueType } from '../../utils';\nimport { typesToConvert, typesOfNodes } from '../../types';\n\ninterface PreviewRowProps {\n  name: string;\n  value: any;\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n  onAddHandler: (parent: string) => (nodeType: typesOfNodes) => void;\n}\n\nconst getPathOfProperty = (parentPath: string, property: string) =>\n  parentPath ? `${parentPath}.${property}` : property;\n\nconst getArrayOfPathParts = (path: string, propertyName: string = ''): Array<string> => {\n  return [...path.split('.'), propertyName].filter((key) => key);\n};\n\nconst getStateWithRemovedKey = (path: Array<string>) => (state: {}) => R.dissocPath(path, state);\n\nconst PreviewRow: React.FC<PreviewRowProps> = (props) => {\n  const {\n    name,\n    value: objValue,\n    calculatedData,\n    calculateResult,\n    updatePreviewForm,\n    parent,\n    onAddHandler,\n  } = props;\n\n  const [objKeyInput, setObjKeyInput] = useState(name);\n  const [savedPropValue, savePropValue] = useState(objValue);\n  const [objValueInput, setObjValueInput] = useState(objValue);\n  const [valueType, setValueType] = useState(getValueType(objValueInput));\n  const [isRenderedRow, setRenderedKey] = useState(true);\n  const [isInvalid, setInvalid] = useState(false);\n\n  useEffect(() => {\n    savePropValue(objValue);\n    setObjValueInput(objValue);\n  }, [objValue]);\n\n  const changeObjectPropertyType = (valueType: typesToConvert) => {\n    setValueType(valueType);\n    const propertyPathParts = getArrayOfPathParts(parent, objKeyInput);\n    const convertedValue = convertValueType(objValueInput, valueType);\n\n    calculateResult((state: {}) => R.assocPath(propertyPathParts, convertedValue, state));\n  };\n\n  const onChangeKey = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    setObjKeyInput(value);\n\n    const currentKeyPath = getPathOfProperty(parent, value);\n    const prevInputPath = getPathOfProperty(parent, objKeyInput);\n    const propertyValue = get(calculatedData, prevInputPath);\n    const arrayOfCurrentInputParents = getArrayOfPathParts(currentKeyPath);\n    const arrayOfPrevInputParents = getArrayOfPathParts(prevInputPath);\n\n    const alreadyAddedToResult = get(calculatedData, currentKeyPath);\n\n    if (value.length === 0 || alreadyAddedToResult) {\n      setInvalid(true);\n      calculateResult((state: {}) => R.dissocPath(arrayOfPrevInputParents, state));\n      savePropValue(propertyValue);\n    } else if (!isInvalid) {\n      calculateResult((state: {}) => {\n        const stateWithNewKey = R.assocPath(arrayOfCurrentInputParents, propertyValue, state);\n        return R.dissocPath(arrayOfPrevInputParents, stateWithNewKey);\n      });\n    } else {\n      calculateResult((state: {}) =>\n        R.assocPath(arrayOfCurrentInputParents, savedPropValue, state)\n      );\n      setInvalid(false);\n    }\n  };\n\n  const onChangeValue = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const convertedValue = convertValueType(value, valueType as typesToConvert);\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, objKeyInput);\n\n    calculateResult((state: {}) => R.assocPath(arrayOfPropertyPaths, convertedValue, state));\n    setObjValueInput(value);\n  };\n\n  const onPropRemove = (parent: string, name: string) => () => {\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, name);\n    const removeProp = getStateWithRemovedKey(arrayOfPropertyPaths);\n    /* \n        const updatedState = R.dissocPath(arrayOfPropertyPaths, calculatedData);\n        calculateResult(updatedState);\n        updatePreviewForm(updatedState);\n    */\n    calculateResult(removeProp);\n    setRenderedKey(false);\n  };\n\n  const typeChanger = (\n    <ValueTypeChanger\n      defaultType={valueType as typesToConvert}\n      setType={changeObjectPropertyType}\n      disabled={isInvalid}\n    />\n  );\n  const classNames = isInvalid ? 'previewRow__key--invalid' : 'previewRow__key';\n  const renderKey = () => (\n    <div className=\"previewRow__key-wrapper\">\n      <Input\n        className={classNames}\n        value={objKeyInput}\n        onChange={onChangeKey}\n        style={{ width: 120 }}\n      />\n      {isObject(savedPropValue) && (\n        <AddPropMenu onAddHandler={onAddHandler(`${parent}.${objKeyInput}`)} disabled={isInvalid} />\n      )}\n      <RemoveButton onRemove={onPropRemove(parent, objKeyInput)} disabled={isInvalid} />\n      <span className=\"previewRow__splitter\">:</span>\n    </div>\n  );\n\n  const renderProperty = () => {\n    if (isObject(savedPropValue)) {\n      return (\n        <div className=\"preview-row__editor-wrapper\">\n          <span className=\"preview-form__object-brackets preview-form__object-brackets--open\">\n            {'{'}\n          </span>\n          <JsonEditor\n            data={savedPropValue}\n            calculateResult={calculateResult}\n            calculatedData={calculatedData}\n            updatePreviewForm={updatePreviewForm}\n            parent={getPathOfProperty(parent, objKeyInput)}\n            onAddProperty={onAddHandler}\n          />\n          <span className=\"preview-form__object-brackets preview-form__object-brackets--close\">\n            {'}'}\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <Input\n        value={objValueInput}\n        onChange={onChangeValue}\n        style={{ width: 220 }}\n        addonAfter={typeChanger}\n        disabled={isInvalid}\n      />\n    );\n  };\n  const renderRow = () => (\n    <div className=\"previewRow\">\n      {renderKey()}\n      {renderProperty()}\n    </div>\n  );\n\n  return isRenderedRow ? renderRow() : null;\n};\n\nexport default PreviewRow;\n","import PreviewRow from './PreviewRow';\n\nexport default PreviewRow;","import JsonEditor from './JsonEditor';\n\nexport default JsonEditor;","import React from 'react';\nimport PreviewRow from '../PreviewRow';\nimport { typesOfNodes } from '../../types';\nimport './JsonEditor.css';\n\ninterface JsonEditorProps {\n  data: { [key: string]: any };\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n  onAddProperty: (parent: string) => (nodeType: typesOfNodes) => void;\n}\n\nconst JsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { data, calculateResult, calculatedData, updatePreviewForm, parent, onAddProperty } = props;\n\n  const result = Object.keys(data).map((key) => {\n    return (\n      <PreviewRow\n        name={key}\n        value={data[key]}\n        calculatedData={calculatedData}\n        calculateResult={calculateResult}\n        updatePreviewForm={updatePreviewForm}\n        parent={parent}\n        key={key}\n        onAddHandler={onAddProperty}\n      />\n    );\n  });\n\n  return <div className=\"json-editor\">{result}</div>;\n};\n\nexport default JsonEditor;\n","import React from 'react';\nimport JsonEditor from '../JsonEditor';\nimport './PreviewForm.css';\nimport AddPropMenu from '../AddPropMenu';\nimport uniqueId from 'lodash.uniqueid';\nimport * as R from 'ramda';\nimport { typesOfNodes } from '../../types';\n\ntype PreviewFormProps = {\n  data: {};\n  calculateResult: (state: {}) => void;\n  updateEditorState: (state: {}) => void;\n  dataToRender: {};\n};\n\ninterface newObject {\n  name: string;\n  value: string;\n}\n\nconst getNewObject = (): newObject => {\n  const objectId = uniqueId();\n  const name = `newKey_${objectId}`;\n  const value = `newValue_${objectId}`;\n  return { name, value };\n};\n\nconst getStateWithAddedProperty = (path: string[], value: string | {} = {}) => (state: {}) => {\n  return R.assocPath(path, value, state);\n};\n\nconst getAddedKeyPath = (parent: string, addedKey: string) =>\n  [...parent.split('.'), addedKey].filter((key) => key);\n\nconst PreviewForm: React.FC<PreviewFormProps> = (props) => {\n  const { data, calculateResult, updateEditorState, dataToRender } = props;\n\n  const havingData = Object.keys(data).length;\n\n  const addProperty = (parent: string = '') => (nodeType: typesOfNodes) => {\n    const { name, value } = getNewObject();\n    const addedKeyPath = getAddedKeyPath(parent, name);\n    const getUpdatedState =\n      nodeType === 'leaf'\n        ? getStateWithAddedProperty(addedKeyPath, value)\n        : getStateWithAddedProperty(addedKeyPath);\n    const updatedState = getUpdatedState(dataToRender);\n    updateEditorState(updatedState);\n    calculateResult(updatedState);\n  };\n\n  return (\n    <section className=\"preview-form\">\n      <h2 className=\"preview-form__title\">Preview</h2>\n      <div className=\"preview-form__result\">\n        {havingData ? (\n          <>\n            <span className=\"preview-form__object-brackets preview-form__object-brackets--open-root\">\n              {'{'}\n            </span>\n            <JsonEditor\n              data={data}\n              calculatedData={dataToRender}\n              calculateResult={calculateResult}\n              updatePreviewForm={updateEditorState}\n              onAddProperty={addProperty}\n              parent=\"\"\n            />\n            <div className=\"preview-form__add-button-wrapper\">\n              <AddPropMenu onAddHandler={addProperty()} disabled={false} />\n            </div>\n            <span className=\"preview-form__object-brackets preview-form__object-brackets--close-root\">\n              {'}'}\n            </span>\n          </>\n        ) : (\n          <p className=\"preview-form__message\">No data to render</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewForm;\n","import PreviewForm from './PreviewForm';\n\nexport default PreviewForm;","import Result from './Result';\n\nexport default Result;","import React from 'react';\nimport './Result.css';\n\ninterface ResultProps {\n  data: {};\n}\nconst Result: React.FC<ResultProps> = ({ data }) => (\n  <section className=\"preview-form\">\n    <h2 className=\"preview-form__title\">Result</h2>\n    <pre>{JSON.stringify(data, null, 4)}</pre>\n  </section>\n);\n\nexport default Result;\n","import React, { useState, useEffect } from 'react';\nimport PageHeader from '../Header';\nimport DataForm from '../DataForm';\nimport PreviewForm from '../PreviewForm';\nimport Result from '../Result';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\n\nconst { Header, Content } = Layout;\n\nconst App: React.FC = () => {\n  const [dataToRender, updateDataToRender] = useState({});\n\n  const [editorState, updateEditorState] = useState(dataToRender);\n\n  const [dataToView, setDataToView] = useState(dataToRender);\n\n  useEffect(() => {\n    updateEditorState((state: {}) => {\n      return dataToRender;\n    });\n    setDataToView((state: {}) => {\n      return dataToRender;\n    });\n  }, [dataToRender]);\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <PageHeader />\n      </Header>\n      <Content style={{ padding: '25px 75px' }}>\n        <Row gutter={[8, 8]}>\n          <Col span={4}>\n            <DataForm updateEditorData={updateDataToRender} />\n          </Col>\n          <Col span={14}>\n            <PreviewForm\n              data={editorState}\n              calculateResult={setDataToView}\n              updateEditorState={updateEditorState}\n              dataToRender={dataToView}\n            />\n          </Col>\n          <Col span={6}>\n            <Result data={dataToView} />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}