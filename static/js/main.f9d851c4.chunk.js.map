{"version":3,"sources":["components/Header/index.ts","components/Header/Header.tsx","components/DataForm/DataForm.tsx","components/DataForm/index.tsx","components/ValueTypeChanger/ValueTypeChanger.tsx","components/ValueTypeChanger/index.ts","components/RemoveButton/index.ts","components/RemoveButton/RemoveButton.tsx","utils/getTypes.ts","utils/typeConverters.ts","components/PreviewRow/PreviewRow.tsx","components/PreviewRow/index.ts","components/AddPropertyBtn/index.tsx","components/AddPropertyBtn/AddPropertyBrn.tsx","components/AddTreeBtn/AddTreeBtn.tsx","components/JsonEditor/JsonEditor.tsx","components/JsonEditor/index.ts","components/PreviewForm/index.ts","components/PreviewForm/PreviewForm.tsx","components/Result/index.ts","components/Result/Result.tsx","components/App/App.tsx","components/App/index.ts","index.tsx"],"names":["Header","className","title","TextArea","Input","DataForm","props","currentValue","setValue","transformData","onFinish","Item","rows","value","onChange","evt","updatedVaule","target","type","htmlType","Option","Select","ValueTypeChanger","defaultType","setType","defaultValue","style","width","RemoveButton","onRemove","onClick","icon","DeleteOutlined","color","getValueType","item","Object","Array","isArray","converters","string","String","number","Number","boolean","Boolean","array","split","convertValueType","getPathOfProperty","parentPath","property","getArrayOfPathParts","path","propertyName","filter","key","PreviewRow","name","objValue","calculatedData","calculateResult","updatePreviewForm","parent","useState","objKeyInput","setObjKeyInput","savedPropValue","savePropValue","objValueInput","setObjValueInput","valueType","setValueType","isRenderedRow","setRenderedKey","onChangeKey","addedPathOfValue","addedValue","oldPathOfValue","currentKeyPath","prevInputPath","propertyValue","get","arrayOfCurrentInputParents","arrayOfPrevInputParents","updateState","state","stateWithNewKey","R","onChangeValue","convertedValue","arrayOfPropertyPaths","onPropRemove","removeProp","typeChanger","propertyPathParts","renderProperty","data","addonAfter","AddPropertyBtn","AddTreeBtn","getStateWithAddedProperty","JsonEditor","dataToRender","updateDataToRender","getState","calculatedDataWithAddedProperty","updatedDataToRender","onAddHandler","nodeType","objectId","uniqueId","getNewObject","addedKeyPath","addedKey","getAddedKeyPath","getUpdatedState","result","keys","map","PreviewForm","previewFormState","havingData","length","Result","JSON","stringify","Layout","Content","App","setData","parse","previewData","setPreviewData","padding","gutter","span","stringData","objData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9d851c4.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { PageHeader } from 'antd';\nimport './Header.css';\n\nconst Header: React.FC = () => (\n  <PageHeader className=\"header\" title=\"JSON editor\" />\n);\n\nexport default Header;\n","import React from 'react';\nimport { Form, Input, Button } from 'antd';\n\nconst { TextArea } = Input;\n\ntype DataFormProps = {\n  currentValue: string;\n  setValue: (value: string) => void;\n  transformData: (value: string) => void;\n};\n\nconst DataForm: React.FC<DataFormProps> = (props) => {\n  const { currentValue, setValue, transformData } = props;\n\n  const onFormSubmit = () => {\n    transformData(currentValue);\n    setValue('');\n  };\n\n  const onDataEdit = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const updatedVaule = evt.target.value;\n    setValue(updatedVaule);\n  };\n\n  return (\n    <section className=\"data-form\">\n      <h2 className=\"data-form__title\">Enter data</h2>\n      <Form onFinish={onFormSubmit}>\n        <Form.Item>\n          <TextArea rows={12} value={currentValue} onChange={onDataEdit} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Render Preview\n          </Button>\n        </Form.Item>\n      </Form>\n    </section>\n  );\n};\n\nexport default DataForm;\n","import DataForm from \"./DataForm\";\n\nexport default DataForm;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './ValueTypeChanger.css';\nimport { typesToConvert } from '../../types';\n\nconst { Option } = Select;\n\ninterface ValueTypeChanger {\n  defaultType: typesToConvert;\n  setType: (value: typesToConvert) => void;\n}\n\nconst ValueTypeChanger: React.FC<ValueTypeChanger> = ({ defaultType, setType }) => {\n  return (\n    <Select\n      className=\"value-type-changer\"\n      defaultValue={defaultType}\n      style={{ width: 90 }}\n      onChange={setType}\n    >\n      <Option value=\"string\">String</Option>\n      <Option value=\"number\">Number</Option>\n      <Option value=\"array\">Array</Option>\n      <Option value=\"boolean\">Boolean</Option>\n    </Select>\n  );\n};\n\nexport default ValueTypeChanger;\n","import ValueTypeChanger from './ValueTypeChanger';\n\nexport default ValueTypeChanger;\n","import RemoveButton from './RemoveButton';\n\nexport default RemoveButton;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface RemoveButtonProps {\n  onRemove: () => void;\n}\n\nconst RemoveButton: React.FC<RemoveButtonProps> = ({ onRemove }) => {\n  return (\n    <Button\n      onClick={onRemove}\n      icon={<DeleteOutlined style={{ color: 'red' }} />}\n      title=\"remove property\"\n    ></Button>\n  );\n};\n\nexport default RemoveButton;\n","const isArray = (item: any) => {\n  return item instanceof Object && item instanceof Array;\n};\n\nconst isObject = (item: any) => {\n  return item instanceof Object && !(item instanceof Array);\n};\n\nconst getValueType = (item: any) => (isArray(item) ? 'array' : typeof item);\n\nexport { isObject, getValueType };\n","import { typesToConvert } from '../types';\n\nconst converters = {\n  string: (value: any) => String(value),\n  number: (value: any) => Number(value),\n  boolean: (value: any) => Boolean(value),\n  array: (value: any) => String(value).split(','),\n};\n\nconst convertValueType = (value: any, type: typesToConvert): any => {\n  return converters[type](value);\n};\n\nexport default convertValueType;\n","import React, { useState } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport * as R from 'ramda';\nimport get from 'lodash.get';\nimport ValueTypeChanger from '../ValueTypeChanger';\nimport './PreviewRow.css';\nimport { Input } from 'antd';\nimport RemoveButton from '../RemoveButton';\nimport { isObject, getValueType, convertValueType } from '../../utils';\nimport { typesToConvert } from '../../types';\n\ninterface PreviewRowProps {\n  name: string;\n  value: any;\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\nconst getPathOfProperty = (parentPath: string, property: string) =>\n  parentPath ? `${parentPath}.${property}` : property;\n\nconst getArrayOfPathParts = (path: string, propertyName: string = ''): Array<string> => {\n  return [...path.split('.'), propertyName].filter((key) => key);\n};\n\nconst getUpdatedState = (\n  addedPathOfValue: Array<string>,\n  addedValue: any,\n  oldPathOfValue: Array<string>\n) => (state: {}) => {\n  const stateWithNewKey = R.assocPath(addedPathOfValue, addedValue, state);\n  return R.dissocPath(oldPathOfValue, stateWithNewKey);\n};\n\nconst getStateWithRemovedKey = (path: Array<string>) => (state: {}) => R.dissocPath(path, state);\n\nconst PreviewRow: React.FC<PreviewRowProps> = (props) => {\n  const {\n    name,\n    value: objValue,\n    calculatedData,\n    calculateResult,\n    updatePreviewForm,\n    parent,\n  } = props;\n\n  const [objKeyInput, setObjKeyInput] = useState(name);\n  const [savedPropValue, savePropValue] = useState(objValue);\n  const [objValueInput, setObjValueInput] = useState(objValue);\n  const [valueType, setValueType] = useState(getValueType(objValueInput));\n  const [isRenderedRow, setRenderedKey] = useState(true);\n\n  const changeObjectPropertyType = (valueType: typesToConvert) => {\n    setValueType(valueType);\n    const propertyPathParts = getArrayOfPathParts(parent, objKeyInput);\n    const convertedValue = convertValueType(objValueInput, valueType);\n\n    calculateResult((state: {}) => R.assocPath(propertyPathParts, convertedValue, state));\n  };\n\n  const onChangeKey = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const currentKeyPath = getPathOfProperty(parent, value);\n    const prevInputPath = getPathOfProperty(parent, objKeyInput);\n    const propertyValue = get(calculatedData, prevInputPath);\n    const arrayOfCurrentInputParents = getArrayOfPathParts(currentKeyPath);\n    const arrayOfPrevInputParents = getArrayOfPathParts(prevInputPath);\n\n    const updateState = getUpdatedState(\n      arrayOfCurrentInputParents,\n      propertyValue,\n      arrayOfPrevInputParents\n    );\n\n    calculateResult(updateState);\n    updatePreviewForm(updateState);\n    savePropValue(propertyValue);\n    setObjKeyInput(value);\n  };\n\n  const onChangeValue = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value },\n    } = evt;\n\n    const convertedValue = convertValueType(value, valueType as typesToConvert);\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, objKeyInput);\n\n    calculateResult((state: {}) => R.assocPath(arrayOfPropertyPaths, convertedValue, state));\n    setObjValueInput(value);\n  };\n\n  const onPropRemove = (parent: string, name: string) => () => {\n    const arrayOfPropertyPaths = getArrayOfPathParts(parent, name);\n    const removeProp = getStateWithRemovedKey(arrayOfPropertyPaths);\n\n    calculateResult(removeProp);\n    updatePreviewForm(removeProp);\n    setRenderedKey(false);\n  };\n\n  const typeChanger = (\n    <ValueTypeChanger\n      defaultType={valueType as typesToConvert}\n      setType={changeObjectPropertyType}\n    />\n  );\n\n  const renderKey = () => (\n    <>\n      <Input\n        className=\"previewRow__key\"\n        value={objKeyInput}\n        onChange={onChangeKey}\n        style={{ width: 120 }}\n      />\n      <RemoveButton onRemove={onPropRemove(parent, objKeyInput)} />\n      <span className=\"previewRow__splitter\">:</span>\n    </>\n  );\n\n  const renderProperty = () => (\n    <>\n      {isObject(savedPropValue) ? (\n        <JsonEditor\n          data={savedPropValue}\n          calculateResult={calculateResult}\n          calculatedData={calculatedData}\n          updatePreviewForm={updatePreviewForm}\n          parent={getPathOfProperty(parent, objKeyInput)}\n        />\n      ) : (\n        <Input\n          value={objValueInput}\n          onChange={onChangeValue}\n          style={{ width: 220 }}\n          addonAfter={typeChanger}\n        />\n      )}\n    </>\n  );\n\n  const renderRow = () => (\n    <div className=\"previewRow\">\n      {renderKey()}\n      {renderProperty()}\n    </div>\n  );\n\n  return isRenderedRow ? renderRow() : null;\n};\n\nexport default PreviewRow;\n","import PreviewRow from './PreviewRow';\n\nexport default PreviewRow;","import AddPropertyBtn from './AddPropertyBrn';\n\nexport default AddPropertyBtn;\n","import React from 'react';\n\ninterface AddPropertyBtnProps {\n  onClick: () => void;\n}\n\nconst AddPropertyBtn: React.FC<AddPropertyBtnProps> = (props) => {\n  const { onClick } = props;\n  return <button onClick={onClick}>Add leaf</button>;\n};\n\nexport default AddPropertyBtn;\n","import React from 'react';\n\ninterface AddTreeBtnProps {\n  onClick: () => void;\n}\n\nconst AddTreeBtn: React.FC<AddTreeBtnProps> = (props) => {\n  const { onClick } = props;\n  return <button onClick={onClick}>Add Tree</button>;\n};\n\nexport default AddTreeBtn;\n","import React, { useState } from 'react';\nimport PreviewRow from '../PreviewRow';\nimport AddPropertyBtn from '../AddPropertyBtn';\nimport AddTreeBtn from '../AddTreeBtn';\nimport * as R from 'ramda';\nimport uniqueId from 'lodash.uniqueid';\nimport get from 'lodash.get';\nimport { typesOfNodes } from '../../types';\n\ninterface JsonEditorProps {\n  data: { [key: string]: any };\n  calculatedData: {};\n  parent: string;\n  calculateResult: (state: {}) => void;\n  updatePreviewForm: (state: {}) => void;\n}\n\ninterface newObject {\n  name: string;\n  value: string;\n}\n\nconst getUpdatedData = (state: {}, target: string) => {\n  return target ? get(state, target) : state;\n};\n\nconst getStateWithAddedProperty = (path: string[], value: string | {} = {}) => (state: {}) => {\n  return R.assocPath(path, value, state);\n};\n\nconst getNewObject = (): newObject => {\n  const objectId = uniqueId();\n  const name = `newKey_${objectId}`;\n  const value = `newValue_${objectId}`;\n  return { name, value };\n};\n\nconst getAddedKeyPath = (parent: string, addedKey: string) =>\n  [...parent.split('.'), addedKey].filter((key) => key);\n\nconst JsonEditor: React.FC<JsonEditorProps> = (props) => {\n  const { data, calculateResult, calculatedData, updatePreviewForm, parent } = props;\n\n  const [dataToRender, updateDataToRender] = useState(data);\n\n  const updateState = (getState: (state: {}) => {}) => {\n    const calculatedDataWithAddedProperty = getState(calculatedData);\n    const updatedDataToRender = getUpdatedData(calculatedDataWithAddedProperty, parent);\n\n    calculateResult(calculatedDataWithAddedProperty);\n    updatePreviewForm(getState);\n    updateDataToRender(updatedDataToRender);\n  };\n\n  const onAddHandler = (nodeType: typesOfNodes) => () => {\n    const { name, value } = getNewObject();\n    const addedKeyPath = getAddedKeyPath(parent, name);\n    const getUpdatedState =\n      nodeType === 'leaf'\n        ? getStateWithAddedProperty(addedKeyPath, value)\n        : getStateWithAddedProperty(addedKeyPath);\n\n    updateState(getUpdatedState);\n  };\n\n  const result = Object.keys(dataToRender).map((key) => {\n    return (\n      <PreviewRow\n        name={key}\n        value={dataToRender[key]}\n        calculatedData={calculatedData}\n        calculateResult={calculateResult}\n        updatePreviewForm={updatePreviewForm}\n        parent={parent}\n        key={key}\n      />\n    );\n  });\n\n  return (\n    <div>\n      {result}\n      <AddPropertyBtn onClick={onAddHandler('leaf')} />\n      <AddTreeBtn onClick={onAddHandler('node')} />\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import JsonEditor from './JsonEditor';\n\nexport default JsonEditor;","import PreviewForm from './PreviewForm';\n\nexport default PreviewForm;","import React, { useState } from 'react';\nimport JsonEditor from '../JsonEditor';\nimport './PreviewForm.css';\n\ntype PreviewFormProps = {\n  data: {};\n  calculateResult: (state: {}) => void;\n};\n\nconst PreviewForm: React.FC<PreviewFormProps> = (props) => {\n  const { data, calculateResult } = props;\n  const [previewFormState, updatePreviewForm] = useState(data);\n\n  const havingData = Object.keys(previewFormState).length;\n\n  return (\n    <section className=\"preview-form\">\n      <h2 className=\"preview-form__title\">Preview</h2>\n      <div className=\"preview-form__result\">\n        {havingData ? (\n          <JsonEditor\n            data={previewFormState}\n            calculatedData={data}\n            calculateResult={calculateResult}\n            updatePreviewForm={updatePreviewForm}\n            parent=\"\"\n          />\n        ) : (\n          <p className=\"preview-form__message\">No data to render</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default PreviewForm;\n","import Result from './Result';\n\nexport default Result;","import React from 'react';\nimport './Result.css';\n\ninterface ResultProps {\n  data: {};\n}\nconst Result: React.FC<ResultProps> = ({ data }) => (\n  <section className=\"preview-form\">\n    <h2 className=\"preview-form__title\">Result</h2>\n    <pre>{JSON.stringify(data, null, 4)}</pre>\n  </section>\n);\n\nexport default Result;\n","import React, { useState } from 'react';\nimport PageHeader from '../Header';\nimport DataForm from '../DataForm';\nimport PreviewForm from '../PreviewForm';\nimport Result from '../Result';\nimport { Layout } from 'antd';\nimport { Row, Col } from 'antd';\n\nconst { Header, Content } = Layout;\n\n// const exampleJSON =\n//   '{ \"name\": \"John\", \"age\": 35, \"isAdmin\": false, \"friends\": [0,1,2,3], \"data\": { \"name\": \"John1\", \"age\": 25, \"isAdmin\": true, \"friends\": [0,1,2,3], \"nestedData1\": { \"name\": \"John2\", \"age\": 15, \"isAdmin\": true, \"friends\": [0,1,2,3] } }, \"testKey1\": \"testValue1\", \"testKey2\": \"testValue2\", \"testKey3\": [1,2,3] }';\n\nconst exampleJSON =\n  '{\"name\":\"John\",\"age\":35,\"isAdmin\":false,\"friends\":[0,1,2,3],\"data\":{\"name\":\"John1\",\"age\":25,\"isAdmin\":true,\"friends\":[0,1,2,3],\"nestedData1\":{\"name\":\"John2\",\"age\":15,\"isAdmin\":true,\"friends\":[0,1,2,3],\"nestedData2\":{\"name\":\"John3\",\"age\":25,\"isAdmin\":false,\"friends\":[0,1,2,3,5]}}},\"testKey1\":\"testValue1\",\"testKey2\":\"testValue2\",\"testKey3\":[1,2,3]}';\n\nconst App: React.FC = () => {\n  const [data, setData] = useState(exampleJSON);\n  const [previewData, setPreviewData] = useState(JSON.parse(data));\n\n  const transformData = (stringData: string) => {\n    const objData = JSON.parse(stringData);\n    setPreviewData(objData);\n  };\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <PageHeader />\n      </Header>\n      <Content style={{ padding: '25px 75px' }}>\n        <Row gutter={[8, 8]}>\n          <Col span={5}>\n            <DataForm\n              currentValue={data}\n              setValue={setData}\n              transformData={transformData}\n            />\n          </Col>\n          <Col span={14}>\n            <PreviewForm data={previewData} calculateResult={setPreviewData} />\n          </Col>\n          <Col span={5}>\n            <Result data={previewData} />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}